{
  "fileName": "2021-08-25-Better-JSON-Schema-Analysis-with-json-schema-report.md",
  "title": "Better JSON Schema Analysis with json-schema-report",
  "dateTime": "2021-08-25 21:58",
  "tags": [
    "JavaScript"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "Many times in my career this far I have encountered JSON Schema schemas as a\nmeans of validating JSON data, either as data from some API or from a file. It's\na concise and flexible format with good documentation, and I'm a big fan."
    },
    {
      "type": "paragraph",
      "text": "With simple schemas and data, validation is very useful and can give API users\ngood helpful feedback about why their request failed. But in cases of extremely\nlarge or complex schemas, common validators fail to provide the key details that\nhelp those same users correct their submissions."
    },
    {
      "type": "paragraph",
      "text": "In this post, I will detail how such validators are useful, when they are not\nso useful, and a tool I've created called\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/json-schema-report\">json-schema-report</a> that makes\nit much easier to debug such large schemas and save a lot of time."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/08/jsr.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "A quick intro"
    },
    {
      "type": "paragraph",
      "text": "If you're not already aware, here's an example JSON Schema schema\ndescribing a car type of object and what it should look like:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-json\">JSON</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-syntax\">{</span>\n  <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"object\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"required\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span><span class=\"_string\">\"color\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"length\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"topSpeed\"</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"properties\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n    <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"string\"</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"length\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"number\"</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"numDoors\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"number\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"minimum\"</span><span class=\"js-syntax\">: </span>2\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"topSpeed\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"number\"</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "It describes the 'shape' of objects that are a valid 'car' type -\n<code>color</code> should be a string, <code>numDoors</code> should be a number\ngreater than or equal to two - you get the idea. So the following data will be\nvalidated as labelled:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">// Valid - all properties required are present and correct</span>\n<span class=\"js-blueword\">const </span>validCar<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n  color<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>red<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n  length<span class=\"js-syntax\">: </span>3.4<span class=\"js-syntax\">,</span>\n  numDoors<span class=\"js-syntax\">: </span>4<span class=\"js-syntax\">,</span>\n  topSpeed<span class=\"js-syntax\">: </span>105\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Invalid - some properties are the wrong type</span>\n<span class=\"js-blueword\">const </span>invalidCar<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n  color<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>black<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n  length<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>25m<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n  topSpeed<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>230kph<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "We can use a package such as the popular <code>jsonschema</code> npm module\nto build a validator function to check data we might receive:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span> validate <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>jsonschema<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Validate data as a car.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} data - The data to validate.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const </span>validateCar<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span> errors <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>validate<span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">,</span> carSchema<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>errors.length<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span>errors.map<span class=\"js-syntax\">(</span>p<span class=\"js-keyword\"> => </span>p.stack<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\nvalidateCar<span class=\"js-syntax\">(</span>invalidCar<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This shows us some hints about why the data isn't valid:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-syntax\">[</span>\n  <span class=\"_string\">\"instance.length is not of a type<span class=\"js-syntax\">(</span>s<span class=\"js-syntax\">)</span> number\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"instance.topSpeed is not of a type<span class=\"js-syntax\">(</span>s<span class=\"js-syntax\">)</span> number\"</span>\n<span class=\"js-syntax\">]</span>\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Very large (and scary) schemas"
    },
    {
      "type": "paragraph",
      "text": "This is all fine when the schema is relatively simple - a simple description\nof expected properties such as that above for a car for example. However, I\nrecently had the pleasure of working on a validator for the fearsome schema for\nGS1 EPCIS events - objects describing events that happen to consumer products\nas they are manufactured and shipped around the world."
    },
    {
      "type": "paragraph",
      "text": "Long story short - this format is extremely flexible to encompass all the\npossible kinds of events and transformations these products undergo as they make\ntheir way to stores from raw materials, but also\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/gs1/EPCIS/blob/master/JSON/EPCIS-JSON-Schema-single-event.json\">very strictly defined</a>."
    },
    {
      "type": "paragraph",
      "text": "When we test candidate EPCIS events against the same validator for this large\nformat, the nature of the schema (it uses many layers of abstractions and\nadvanced JSON Schema features such as <code>oneOf</code>, <code>anyOf</code>,\nand <code>allOf</code>), the errors we get back are a lot less helpful both for\nus as well as anybody that might want to send us EPCIS events."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-text\">Text</div>\n<pre class=\"\"><div class=\"code-block\">\ninstance failed to match exactly one schema (matched 0 out of 5)\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Not very useful for debugging..."
    },
    {
      "type": "paragraph",
      "text": "In this instance, the data failed to match any sub-schema for each of the five\nmajor event types. Out of the 20+ potential properties of all of the event types\nwe have no way of knowing which type of event was the closest to being correct\n(for example, one bad date format can invalidate the entire event type\nsub-schema) or which properties caused validation to fail."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Looking deeper"
    },
    {
      "type": "paragraph",
      "text": "In debugging these bad events, the usual course of action is to painstakingly\ncompare the huge EPCIS schema against the failing data after the fact, and use\nour eyes to spot the format/data mistakes on a field-by-field basis, which can\ntake a lot of time. What was needed was a way to see all validation results,\nnot just the first error encoutered which causes some validator to stop early."
    },
    {
      "type": "paragraph",
      "text": "Other kinds of validators go a step further and return all errors for all of the\npartually matching sub-schemas for different event types, but this makes both\na poor developer experience in an API response, and doesn't give a quick\nindication of which was the closest possible match. For EPCIS events, this was\nusually over 100 errors to consider, most of which were not relevant because\nthey were for types of event other than the one we were trying to send, such as\nan <code>AggregationEvent</code> when we were actually sending\n<code>ObjectEvent</code>."
    },
    {
      "type": "paragraph",
      "text": "I had a quick look around for such a tool or library that gave a detailed\nbreakdown of schema validation results, but came up with very little or nothing\nthat was relevant enough, so on a weekend earlier in the year I decided to\nhave a go at it myself."
    },
    {
      "type": "header",
      "level": 2,
      "text": "json-schema-report"
    },
    {
      "type": "paragraph",
      "text": "My approach was this - for each property in the schema, see if it is present\nand correct in the provided instance being validated."
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>If it is a basic type such as <code>string</code> validate it.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>If it is an object with properties inside, or an array of objects, go one\nlevel deeper and check those child properties recursively.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>If it is a 'multi-schema', such as <code>oneOf</code>, <code>anyOf</code>,\nand <code>allOf</code>, check each sub-schema against the data in the same\nrecursive fashion, and once all are checked, apply the required logic for those\noperators. For example, if it's a <code>oneOf</code> only validate if one of\nthe schemas matched the data and the other candidates did not.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "This last part was the most complicated to implement, given that it should be\nmade relatively easy to see which of many possible sub-schemas is the most\ncorrect one, which can make the difference between seeing only one or two\nerrors that actually need to be corrected, and a dozed errors that are not\nrelevant and are then a distraction."
    },
    {
      "type": "paragraph",
      "text": "In any case, the structure of the data is shown visually with color coding,\nshowing which properties validated, which did not, which were missing, and which\nwere optional in the schema's eyes, but omitted from the data itself."
    },
    {
      "type": "paragraph",
      "text": "To demonstrate this improved power to deduce more quickly which properties\nshould be corrected, here is an example output for an EPCIS event with only one\nactual error, in the more helpful color-coded summary style, expressing also the\nstructure of the schema:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/08/jsr-objectevent.png"
    },
    {
      "type": "paragraph",
      "text": "We can see from the top level down to <code>onlyValidEvent</code> that if we\nintended to send an <code>objectEvent</code> then the only issue is that we\nforgot to include the <code>action</code> property - an easy fix. In addition\nwe are warned that at the top document level that <code>schemaVersion</code>\nis not a string, but in fact was a number - another easy fix."
    },
    {
      "type": "paragraph",
      "text": "To contrast, if we were not sure what the intended event type was, a look at the\nsection of the output for <code>transformationEvent</code> tells us visually\nand in detail that it is very unlikely that the data contained an attempted\nevent of that type due to the large number of missing required properties. This\nexample also shows the complex nature of the schema itself, with many layers of\n'multi-schema' clauses:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/08/jsr-transformationevent.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "The first version was quickly thrown together and then left alone after the\ninitial need for it went away, but I recently finished it up and made it much\nmore useful for these kinds of complex schemas. Hopefully it will assist me in\nmy future EPCIS-related endevours when data is not valid and time to spend\ndebugging it is short."
    },
    {
      "type": "paragraph",
      "text": "As a visual aid, it does the job well. But where the true value lies is in\nbringing the same improvements in ease-of-debugging to API users. Instead of\na single unhelpful statement, or a list of 100+ possibly-relevant errors,\nperhaps some future version could act as a library that buckets errors based on\neach sub-schema, and provides some measure of probability of completeness to\nhelp determine where to focus debugging efforts and time spent."
    },
    {
      "type": "paragraph",
      "text": "Check out the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/json-schema-report\">project repository</a> for all\nthe code and documentation in case you want to use it yourself! It also includes\na set of unit tests that give examples of all the types of schema supported."
    },
    {
      "type": "paragraph",
      "text": "You can also install it directly from npm:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-text\">Text</div>\n<pre class=\"\"><div class=\"code-block\">\nnpm i -g json-schema-report\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "And then use it with a schema file and data instance file:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-text\">Text</div>\n<pre class=\"\"><div class=\"code-block\">\n$ jsr ./car-schema.json carSample.json\n</div></pre>"
    }
  ]
}