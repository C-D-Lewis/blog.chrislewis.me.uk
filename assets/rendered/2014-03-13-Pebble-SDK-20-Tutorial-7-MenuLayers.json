{
  "fileName": "2014-03-13-Pebble-SDK-20-Tutorial-7-MenuLayers.md",
  "title": "Pebble SDK 2.0 Tutorial #7: MenuLayers",
  "dateTime": "2014-03-13 01:46:27",
  "tags": [
    "Pebble"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "<strong>Required Reading"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Introduction"
    },
    {
      "type": "paragraph",
      "text": "After a few requests, in this section we will look at using <code>MenuLayer</code>s in a Pebble watchapp. If you pick up your Pebble now and press the select button from the watch face, what you see is a <code>MenuLayer</code>. It has rows, icons and actions. Let's build one of those!"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2014/03/pebble-screenshot_2014-03-13_00-22-47.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Setup"
    },
    {
      "type": "paragraph",
      "text": "The first step as usual is to start a new CloudPebble project with the basic app template. Here's that again, for convenience:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n#include\n\nWindow* window<span class=\"js-syntax\">;</span>\n\n<span class=\"js-blueword\">void </span>window_load<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">void </span>window_unload<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">void </span>init<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  window<span class=\"js-keyword\"> = </span>window_create<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  WindowHandlers handlers<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    .load<span class=\"js-keyword\"> = </span>window_load<span class=\"js-syntax\">,</span>\n    .unload<span class=\"js-keyword\"> = </span>window_unload\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n  window_set_window_handlers<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span>WindowHandlers<span class=\"js-syntax\">)</span> handlers<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  window_stack_push<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">,</span><span class=\"js-blueword\"> true</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">void </span>deinit<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  window_destroy<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">int </span>main<span class=\"js-syntax\">(</span>void<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  init<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  app_event_loop<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  deinit<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Now that's out the way, declare a global pointer to a <code>MenuLayer</code> at the top of the file below the pre-processor directives."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\nMenuLayer *menu_layer<span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This <code>Layer</code> type is a bit more complex to set up than the other <code>Layers</code>, in that it requires a large amount of information about how it will look and behave before it can be instantiated. This information is given to the <code>MenuLayer</code> via the use of a number of callbacks. When the <code>MenuLayer</code> is redrawn or reloaded, it calls these functions to get the relevant data. The advantage of this approach is that the <code>MenuLayer</code> rows can be filled with data that can be changed at any time, such as with <a href=\"https://play.google.com/store/apps/details?id=com.wordpress.ninedof.wristponder\" title=\"Wristponder\">Wristponder</a> or <a title=\"PTS Source example\" href=\"https://github.com/C-D-Lewis/pebble-tube-status/blob/master/src/main.c#L120\">Pebble Tube Status</a> (shameless plugs!)"
    },
    {
      "type": "paragraph",
      "text": "The <a title=\"MenuLayer callbacks\" href=\"https://developer.getpebble.com/2/api-reference/group___menu_layer.html#ga4dbe0980dc6d9fe2b49b778a067d6314\">API documentation</a> describes all the possible <code>MenuLayerCallbacks</code> that can be associated with a <code>MenuLayer</code>, but the ones we will be using for a simple example will be:"
    },
    {
      "type": "paragraph",
      "text": "• <code>.draw_row</code> - This is used to draw the layout inside a menu item"
    },
    {
      "type": "paragraph",
      "text": "• <code>.get_num_rows</code> - This is used to feedback the total number of rows in the <code>MenuLayer</code>. This can be a <code>#define</code>d value, or an <code>int</code>, and so variable"
    },
    {
      "type": "paragraph",
      "text": "• <code>.select_click</code> - This is used to decide what happens when the select button is pressed, which will vary depending on which row is currently selected"
    },
    {
      "type": "paragraph",
      "text": "Let's define these callbacks using the signatures provided by the API documentation linked previously. These must be above <code>window_load()</code> as is now the norm (hopefully!):"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">void </span>draw_row_callback<span class=\"js-syntax\">(</span>GContext *ctx<span class=\"js-syntax\">,</span> Layer *cell_layer<span class=\"js-syntax\">,</span> MenuIndex *cell_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\nuint16_t num_rows_callback<span class=\"js-syntax\">(</span>MenuLayer *menu_layer<span class=\"js-syntax\">,</span> uint16_t section_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">void </span>select_click_callback<span class=\"js-syntax\">(</span>MenuLayer *menu_layer<span class=\"js-syntax\">,</span> MenuIndex *cell_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Now those are in place, let's add code to have them do something we'd find more useful than blank callbacks. The example we are going to use is a list of fruits (boring, I know!). The list will be of seven fruits, and brief descriptions. Thus, the <code>num_rows_callback()</code> function becomes simply:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\nuint16_t num_rows_callback<span class=\"js-syntax\">(</span>MenuLayer *menu_layer<span class=\"js-syntax\">,</span> uint16_t section_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  <span class=\"js-keyword\">return </span>7<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "For the <code>draw_row_handler()</code>, we will need to be able to alter what is drawn in the row depending on <em>which</em> row it is. This can be done by <code>switch</code>ing the <code>cell_index->row</code> property. You can use the presented <code>GContext</code> however you like for any of the SDK drawing functions, but to keep things simple we will use the pre-made drawing functions provided by the SDK. With these two last points combined, the <code>draw_row_callback()</code> function transforms into this beast:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">void </span>draw_row_callback<span class=\"js-syntax\">(</span>GContext *ctx<span class=\"js-syntax\">,</span> Layer *cell_layer<span class=\"js-syntax\">,</span> MenuIndex *cell_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n<span class=\"comment\">  //Which row is it?</span>\n <span class=\"js-keyword\"> switch</span><span class=\"js-syntax\">(</span>cell_index<span class=\"js-keyword\">-></span>row<span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">{</span>\n <span class=\"js-keyword\"> case</span> 0<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"1. Apple\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Green and crispy!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 1<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"2. Orange\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Peel first!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 2<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"3. Pear\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Teardrop shaped!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 3<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"4. Banana\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Can be a gun!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 4<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"5. Tomato\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Extremely versatile!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 5<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"6. Grape\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Bunches of em!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n <span class=\"js-keyword\"> case</span> 6<span class=\"js-syntax\">:</span>\n    menu_cell_basic_draw<span class=\"js-syntax\">(</span>ctx<span class=\"js-syntax\">,</span> cell_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"7. Melon\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Only three left!\"</span><span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The <code>NULL</code> references are in the place that a row icon reference would be placed (if a <code>GBitmap</code> were to be shown). Thus, each layer will be drawn with its own unique message."
    },
    {
      "type": "paragraph",
      "text": "The final callback, <code>select_click_callback()</code> will do something different depending on which row is selected when the select button is pressed. To illustrate this, we will use a series of vibrations that signifies the numerical value of the row. Here's how this is done (or Vibes 101!):"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">void </span>select_click_callback<span class=\"js-syntax\">(</span>MenuLayer *menu_layer<span class=\"js-syntax\">,</span> MenuIndex *cell_index<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">void </span>*callback_context<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n<span class=\"comment\">  //Get which row</span>\n  <span class=\"js-blueword\">int </span>which<span class=\"js-keyword\"> = </span>cell_index<span class=\"js-keyword\">-></span>row<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //The array that will hold the on/off vibration times</span>\n  uint32_t segments<span class=\"js-syntax\">[</span>16<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //Build the pattern (milliseconds on and off in alternating positions)</span>\n  for<span class=\"js-syntax\">(</span><span class=\"js-blueword\">int </span>i<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span> i < which + 1<span class=\"js-syntax\">;</span> i++<span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">{</span>\n    segments<span class=\"js-syntax\">[</span>2 * i<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span>200<span class=\"js-syntax\">;</span>\n    segments<span class=\"js-syntax\">[</span><span class=\"js-syntax\">(</span>2 * i<span class=\"js-syntax\">)</span> + 1<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span>100<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n\n<span class=\"comment\">  //Create a VibePattern data structure</span>\n  VibePattern pattern<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    .durations<span class=\"js-keyword\"> = </span>segments<span class=\"js-syntax\">,</span>\n    .num_segments<span class=\"js-keyword\"> = </span>16\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //Do the vibration pattern!</span>\n  vibes_enqueue_custom_pattern<span class=\"js-syntax\">(</span>pattern<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "With those three callbacks in place, we can actually create the <code>MenuLayer</code> and add it to the main <code>Window</code>. This is done in four stages:"
    },
    {
      "type": "paragraph",
      "text": "• Create the <code>MenuLayer</code> and assign it to the global pointer"
    },
    {
      "type": "paragraph",
      "text": "• Set it up to receive clicks from the <code>Window</code>"
    },
    {
      "type": "paragraph",
      "text": "• Set the callbacks we just wrote to give the <code>MenuLayer</code> the information it needs"
    },
    {
      "type": "paragraph",
      "text": "• Add the <code>MenuLayer</code> to the main <code>Window</code>"
    },
    {
      "type": "paragraph",
      "text": "Here's the code for that sequence, with annotations (Note the casts used in the <code>MenuLayerCallbacks</code> structure creation):"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">void </span>window_load<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n<span class=\"comment\">  //Create it - 12 is approx height of the top bar</span>\n  menu_layer<span class=\"js-keyword\"> = </span>menu_layer_create<span class=\"js-syntax\">(</span>GRect<span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 144<span class=\"js-syntax\">,</span> 168 - 16<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //Let it receive clicks</span>\n  menu_layer_set_click_config_onto_window<span class=\"js-syntax\">(</span>menu_layer<span class=\"js-syntax\">,</span> window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //Give it its callbacks</span>\n  MenuLayerCallbacks callbacks<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    .draw_row<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>MenuLayerDrawRowCallback<span class=\"js-syntax\">)</span> draw_row_callback<span class=\"js-syntax\">,</span>\n    .get_num_rows<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>MenuLayerGetNumberOfRowsInSectionsCallback<span class=\"js-syntax\">)</span> num_rows_callback<span class=\"js-syntax\">,</span>\n    .select_click<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>MenuLayerSelectCallback<span class=\"js-syntax\">)</span> select_click_callback\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n  menu_layer_set_callbacks<span class=\"js-syntax\">(</span>menu_layer<span class=\"js-syntax\">,</span> NULL<span class=\"js-syntax\">,</span> callbacks<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  //Add to Window</span>\n  layer_add_child<span class=\"js-syntax\">(</span>window_get_root_layer<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> menu_layer_get_layer<span class=\"js-syntax\">(</span>menu_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "As always, de-init the <code>MenuLayer</code>:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">void </span>window_unload<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  menu_layer_destroy<span class=\"js-syntax\">(</span>menu_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "If all has gone well, after compilation you should be greeted with the screen below, as well as the corresponding vibrations when each row is selected:"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2014/03/pebble-screenshot_2014-03-13_01-27-12.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusions\nSo that's how to setup a basic <code>MenuLayer</code>. An extended application like those mentioned previously will use <code>char[]</code> buffers to store each row's text, modified in a <code>in_received</code> signature <code>AppMessage</code> callback, and calling <code>menu_layer_reload_data()</code> in that <code>AppMessage</code> callback, thus updating the <code>MenuLayer</code> with the new data."
    },
    {
      "type": "paragraph",
      "text": "The source code can be found <a title=\"Source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-7\">on GitHub HERE</a>!"
    },
    {
      "type": "paragraph",
      "text": "Let me know any queries you have. Enjoy!"
    }
  ]
}