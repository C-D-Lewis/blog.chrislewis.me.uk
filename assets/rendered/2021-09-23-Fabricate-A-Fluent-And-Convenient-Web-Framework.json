{
  "fileName": "2021-09-23-Fabricate-A-Fluent-And-Convenient-Web-Framework.md",
  "title": "Fabricate.js - A Fluent and Convenient Web Framework",
  "dateTime": "2021-09-24 21:26",
  "tags": [
    "JavaScript",
    "Releases",
    "React"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "Despite using React quite a bit in my professional work, it is rare that one of\nmy personal web projects is large or complex enough to demand such a robust\nsolution - a lot of the time I only need to create a small, modular,\ncomponent-based interface to some APIs or data with limited functionality."
    },
    {
      "type": "paragraph",
      "text": "Examples of this include the dashboards for the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/node-microservices\">node-microservices</a> project,\nfor controlling Raspberry Pi devices and backlights, where all that was needed\nwas some UI to make it easier to send and receive API data and list objects that\nrepresented those devices. Other examples include a novelty soundboard, journal\nkeeping app, and even this blog itself. That last one may be the closest to\nactually justifying using a more popular framework, but it's still just an\noutput for information, hardly a Web-2.0 SPA experience."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Some history"
    },
    {
      "type": "paragraph",
      "text": "In the distant past, such efforts may have been as basic (but arguably still\nvery much effective) as creating most of the page's HTML beforehand and adding\nthe dynamic portions with JavaScript later on, such as the example below:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">// Read devices from the API</span>\nfetchDevices<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>then<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>devices<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">    // Clear the last list results</span>\n    <span class=\"js-blueword\">const</span> deviceList<span class=\"js-keyword\"> = </span>document.getElementById<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>device-list<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    deviceList.innerHTML<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"js-syntax\">'</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Add the new list items</span>\n    devices.forEach<span class=\"js-syntax\">(</span><span class=\"js-blueword\">function</span> <span class=\"js-syntax\">(</span>device<span class=\"js-syntax\">,</span> i<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      <span class=\"js-blueword\">const</span> item<span class=\"js-keyword\"> = </span>document.createElement<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>div<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      item.className<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"js-syntax\">'</span>device-item<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n      item.innerHTML<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"js-syntax\">'</span>Device <span class=\"js-syntax\">'</span></span><span class=\"js-keyword\"> + </span>i<span class=\"js-keyword\"> + </span><span class=\"_string\"><span class=\"js-syntax\">'</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">'</span></span><span class=\"js-keyword\"> + </span>device.name<span class=\"js-keyword\"> + </span><span class=\"_string\"><span class=\"js-syntax\">'</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">'</span></span><span class=\"js-keyword\"> + </span>device.ip<span class=\"js-keyword\"> + </span><span class=\"_string\"><span class=\"js-syntax\">'</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n      item.addEventListener<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>click<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> doSomethingWithDevice<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n      deviceList.appendChild<span class=\"js-syntax\">(</span>item<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Over time, and in the initial version of this blog, the component-based nature\nof React served as an inspiration to model the page less as a series of\noperations but more as a description of the components that make up each portion\nof the UI. This is also known as the declarative style. Therefore creating HTML\nelements from JS can take on a more modular approach:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Create a div to display device data.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} data - Device data.</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> createDeviceItem<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">,</span> i<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> div<span class=\"js-keyword\"> = </span>document.createElement<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>div<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  div.className<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"js-syntax\">'</span>device-item<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n  div.innerHTML<span class=\"js-keyword\"> = </span><span class=\"_string\">`Device $<span class=\"js-syntax\">{</span>i<span class=\"js-syntax\">}</span><span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>device.name<span class=\"js-syntax\">}</span> <span class=\"js-syntax\">(</span>$<span class=\"js-syntax\">{</span>device.ip<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>`</span><span class=\"js-syntax\">;</span>\n\n  div.addEventListener<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>click<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> doSomethingWithDevice<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">return </span>div<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Read devices from the API</span>\nfetchDevices<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>then<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>devices<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">    // Clear the last list results</span>\n    <span class=\"js-blueword\">const</span> deviceList<span class=\"js-keyword\"> = </span>document.getElementById<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>device-list<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    deviceList.innerHTML<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"js-syntax\">'</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Add the new list items</span>\n    devices.forEach<span class=\"js-syntax\">(</span><span class=\"js-blueword\">function</span> <span class=\"js-syntax\">(</span>device<span class=\"js-syntax\">,</span> i<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      deviceList.appendChild<span class=\"js-syntax\">(</span>createDeviceItem<span class=\"js-syntax\">(</span>device<span class=\"js-syntax\">,</span> i<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This is a bit more structured and can be re-used in multiple places, a bit more\nrelevant to a component such as the tags on this blog, which are the same\ncomponent in both the post and the sidebar, but configured differently."
    },
    {
      "type": "paragraph",
      "text": "But, we're still using quite a bit of raw Document API calls to build the UI.\nThings like looping over data shouldn't be quite as verbose, and if multiple\nparts of the app control this UI portion, there will be more code duplication\nthat is strictly required."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Fabricate.js"
    },
    {
      "type": "paragraph",
      "text": "After a couple of years using functions similar to <code>createDeviceItem</code>\nto turn data into <code>HTMLElement</code>s, I decided to try and formalise this\napproach I had organically made use of in a few different projects and try and\nunify it so that it could serve as a common baseline for all those different\nuse-cases. It also had to have some of my personal opinions about styles-in-code\ntoo, since that's how I like to keep my components as a complete single unit in\ncode."
    },
    {
      "type": "paragraph",
      "text": "<a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/fabricate\">fabricate.js</a> builds on this\nslightly more declarative approach (although not wholy-delcarative, as React's\nJSX and shadow DOM reconciliation realize) to provide a set of functions and\nhelpers to make it fast and relatively easy to create just the kinds of UI\nalready described, not as another competitor to the major players in the space,\nbut once again something I can use and say I learned something more about\nbuilding libraries in the process. I like creating libraries!"
    },
    {
      "type": "paragraph",
      "text": "The features at the time of writing include:"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Free-form creation of HTML elements using a fluent chainable syntax.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Easily adding click, hover, change handlers.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Easy management of child elements.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Convenience methods to use Flexbox, begin an app hierarchy, and detect mobile devices.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Simple global state management and component notification.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Simple conditional rendering.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "<table>\n      <tr>\n        <td style=\"padding-right:10px; vertical-align: baseline;\">•</td>\n        <td>Lots of basic starter components that can be easily extended such as Flexbox column/row, text, image, text input, button, loader, fader, material card and more.</td>\n      </tr>\n    </table>"
    },
    {
      "type": "paragraph",
      "text": "Revisitng the devices example, it starts to look a bit more readable:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Create a div to display device data.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} data - Device data.</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> DeviceItem<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">,</span> ip <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span> i<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>div<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>asFlex<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>row<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>withStyles<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n    backgroundColor<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>#444<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    padding<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>10px<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    border<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>solid 2px #4444<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    borderRadius<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>5px<span class=\"js-syntax\">'</span></span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>onClick<span class=\"js-syntax\">(</span>doSomethingWithDevice<span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>setText<span class=\"js-syntax\">(</span><span class=\"_string\">`Device $<span class=\"js-syntax\">{</span>i<span class=\"js-syntax\">}</span><span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>device.name<span class=\"js-syntax\">}</span> <span class=\"js-syntax\">(</span>$<span class=\"js-syntax\">{</span>device.ip<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Use a simple column for the device list</span>\n<span class=\"js-blueword\">const</span> deviceList<span class=\"js-keyword\"> = </span>fabricate.Column<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Begin app hierarchy</span>\nfabricate.app<span class=\"js-syntax\">(</span>deviceList<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Read devices from the API</span>\nfetchDevices<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>then<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>devices<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">    // Clear the last list results</span>\n    deviceList.clear<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Add the new list items with map</span>\n    deviceList.addChildren<span class=\"js-syntax\">(</span>devices.map<span class=\"js-syntax\">(</span>DeviceItem<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "To anyone that's used React in the past, this style should look a lot more\nfamiliar, but to the rest, at least more accessible and easier to put together.\nAbstractions around creating elements, applying styles and attributes, adding\ninteractivity, and composing components as concepts are catered for with not\ntoo much syntax."
    },
    {
      "type": "header",
      "level": 2,
      "text": "State management"
    },
    {
      "type": "paragraph",
      "text": "A simple global state is able to be managed by instructing components to listen\nto specific keys, and updating those keyed values. Here's a counter example:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Counter view output based on state updates.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> CounterView<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>h3<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>watchState<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>el<span class=\"js-syntax\">,</span> state<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>el.setText<span class=\"js-syntax\">(</span><span class=\"_string\">`$<span class=\"js-syntax\">{</span>state.count<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The counter view is notified whenever the state is updated, and has access to\nmore than just a specific part of the state. Updating the state is achieved\nwith use of <code>updateState</code> which allows specific updating of a single\npiece of state, to make a small effort to prevent overwriting the entire state\nby accident. An example that increments the counter value on a timer is shown\nbelow:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">// Begin app with initial state</span>\n<span class=\"js-blueword\">const</span> initialState<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span> count<span class=\"js-syntax\">: </span>0 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\nfabricate.app<span class=\"js-syntax\">(</span>CounterView<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> initialState<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Increment the counter every second</span>\nsetInterval<span class=\"js-syntax\">(</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate.updateState<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>count<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> prev<span class=\"js-keyword\"> => </span>prev.count<span class=\"js-keyword\"> + </span>1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n  1000<span class=\"js-syntax\">,</span>\n<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "In this way, state can be updated from anywhere in the app, and updates to\ncomponents that use those state values is also independant. Sure, it's not as\nfancy as re-rendering the shadow DOM with React, but it's enough to get the\nbenefits of such a style of app state without needing to coordinate all the\nindividual places state should be set and read, and makes intuitive sense in\neach component/update context."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conditional rendering"
    },
    {
      "type": "paragraph",
      "text": "One of the more useful features of React and JSX is the ability to express at\nonce if/when a tree of components should be rendered. For instance, depending\non a <code>loading</code> flag either a spinner or a component displaying the\nloaded data should be shown. In the past, this sort of thing is done by showing\nor hiding elements in specific places in code when those changes should occur.\nIf the app logic is complex, there can be many places this is done and can be\nhard to manage."
    },
    {
      "type": "paragraph",
      "text": "With fabricate.js, this is done by taking advantage of the previously discussed\nstate management with the <code>when</code> function. Simply put, you specify\na callback for checking the state, and a second callback that instructs how the\nconditional component tree should be constructed. If the state check returns\n<code>false</code> then the element is simply removed if it exists and only\nre-added when the check returns <code>true</code> again. Here's an example to\nbetter illustrate the concept in action:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Weather view for the loaded data.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> WeatherView<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>h3<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>watchState<span class=\"js-syntax\">(</span>\n    <span class=\"js-syntax\">(</span>el<span class=\"js-syntax\">,</span> state<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>el.setText<span class=\"js-syntax\">(</span><span class=\"_string\">`$<span class=\"js-syntax\">{</span>state.temp<span class=\"js-syntax\">}</span> degrees<span class=\"js-syntax\">,</span> $<span class=\"js-syntax\">{</span>chance<span class=\"js-syntax\">}</span>% rain chance`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Data widget that shows a loader until loading is complete.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> WeatherWidget<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate.Card<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>withChildren<span class=\"js-syntax\">(</span><span class=\"js-syntax\">[</span>\n    when<span class=\"js-syntax\">(</span>state<span class=\"js-keyword\"> => </span><span class=\"js-keyword\">!</span>state.isLoaded<span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate.Loader<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    when<span class=\"js-syntax\">(</span>state<span class=\"js-keyword\"> => </span>state.isLoaded<span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>WeatherView<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Begin the app</span>\nfabricate.app<span class=\"js-syntax\">(</span>WeatherWidget<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">{</span>\n  isLoaded<span class=\"js-syntax\">: </span>false<span class=\"js-syntax\">,</span>\n  temp<span class=\"js-syntax\">: </span>0<span class=\"js-syntax\">,</span>\n  chance<span class=\"js-syntax\">: </span>0<span class=\"js-syntax\">,</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Fetch weather data and display</span>\nfetchWeather<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>then<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>results<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    updateState<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>temp<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>results.currentTemperature<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    updateState<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>chance<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>results.precipitationChance<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    updateState<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>isLoaded<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>true<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "You can see the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/fabricate/blob/main/examples/login-box/index.html\">login-box</a>\nexample to see how a email/password and spinner animated login box can be\nimplemented in a similar fasion with not too much code."
    },
    {
      "type": "paragraph",
      "text": "In the future I may add a way to update many fields at once and still try and\nprevent accidentally replacing the enture state, such as an object to merge with\nthe previous state, but that doesn't work nicely with deeply nested state\nobjects - a problem for future me!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Examples"
    },
    {
      "type": "paragraph",
      "text": "The repository has several example apps ranging from simple demos of individual\ncomponents to the obligatory 'todo list' or 'task list' example app. But of\ncourse, the most interesting and complex app already using this framework is\nthis blog itself - a good example is the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/blog/blob/master/src/components.js#L307\">moving social link pills</a>\nat the top, which itself composes smaller <code>SocialPill</code> components."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * SiteSocials component with the GitHub, Twitter, LinkedIn and RSS pills.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @returns {HTMLElement}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> SiteSocials<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>fabricate<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>div<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>asFlex<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>row<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>withChildren<span class=\"js-syntax\">(</span><span class=\"js-syntax\">[</span>\n    SocialPill<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      icon<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>github.png<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      text<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>GitHub<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      backgroundColor<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>black<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      href<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>https://github.com/C-D-Lewis<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      maxWidth<span class=\"js-syntax\">: </span>80<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    SocialPill<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      icon<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>twitter.png<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      text<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>Twitter<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      backgroundColor<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>rgb<span class=\"js-syntax\">(</span>29<span class=\"js-syntax\">,</span> 142<span class=\"js-syntax\">,</span> 238<span class=\"js-syntax\">)</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      href<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>https://twitter.com/Chris_DL<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      maxWidth<span class=\"js-syntax\">: </span>80<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    SocialPill<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      icon<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>linkedin.png<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      text<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>LinkedIn<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      backgroundColor<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>rgb<span class=\"js-syntax\">(</span>2<span class=\"js-syntax\">,</span> 76<span class=\"js-syntax\">,</span> 184<span class=\"js-syntax\">)</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      href<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>https://www.linkedin.com/in/chris-lewis-030503117<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      maxWidth<span class=\"js-syntax\">: </span>90<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    SocialPill<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      icon<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>rss.png<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      text<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>RSS<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      backgroundColor<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>rgb<span class=\"js-syntax\">(</span>247<span class=\"js-syntax\">,</span> 171<span class=\"js-syntax\">,</span> 24<span class=\"js-syntax\">)</span><span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      href<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>/feed/rss.xml<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      maxWidth<span class=\"js-syntax\">: </span>60<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "As an illustration, the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/fabricate/tree/main/examples/task-app\">task-app</a>\nexample is shown below in a brief video form:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/09/tasksapp.gif"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "I think those are all the main points - the fact this is used in several webapp\nprojects already means I'll be sure to identify what is/isn't working, new ideas\nfor features etc. It's a good fit for the sorts of medium-complexity webapps I\ntend to create but it's good to know the mainstream frameworks are available\nfor those that get more serious."
    },
    {
      "type": "paragraph",
      "text": "Watch this space for more features and applications in the future - it's going\nto be fun to keep using! If you fancy giving it a try, it can be installed\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/fabricate#installation\">via a CDN</a> or\n<a class=\"link\" target=\"_blank\" href=\"https://www.npmjs.com/package/fabricate.js\">npm</a>, and included in a simple\n<code>script</code> tag."
    }
  ]
}