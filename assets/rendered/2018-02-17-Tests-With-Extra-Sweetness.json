{
  "title": "Tests With Extra Sweetness",
  "fileName": "2018-02-17-Tests-With-Extra-Sweetness.md",
  "dateTime": "2018-02-17 22:11:28",
  "tags": [
    "Integration",
    "JavaScript",
    "Raspberry Pi"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "A quick post about moving my Node app tests to <a href=\"https://mochajs.org/\">Mocha</a> and <a href=\"http://chaijs.com/\">Chai</a>. These are frameworks used where I work, and I figured I may as well learn something new and have more confidence in my Node apps when I deploy them, so how hard can it be?"
    },
    {
      "type": "paragraph",
      "text": "Turns out, quite easy. These testing frameworks are deigned to be flexible and resemble plain-english test descriptions. In fact, the new testing code looks a lot like my home-grown test framework. Have a look below for a comparison (taken from the <a href=\"https://github.com/C-D-Lewis/led-server\"><code>led-server</code></a> project):"
    },
    {
      "type": "paragraph",
      "text": "(You can see the implementation of <code>testBed</code> module in the <a href=\"https://github.com/C-D-Lewis/node-common/blob/master/testBed.js\"><code>node-common</code></a> project)"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Home-grown"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"js-keyword\">async </span><span class=\"js-blueword\">function</span> testSetAll<span class=\"js-syntax\">(</span>expected<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> response<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>testBed.sendConduitPacket<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n    to<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>LedServer<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    topic<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>setAll<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    message<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> all<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span> 25<span class=\"js-syntax\">,</span> 25<span class=\"js-syntax\">,</span> 52 <span class=\"js-syntax\">]</span> <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  testBed.assert<span class=\"js-syntax\">(</span>response.status <span class=\"js-keyword\">===</span> 200 <span class=\"js-keyword\">&&</span> response.message.content <span class=\"js-keyword\">===</span> <span class=\"_string\"><span class=\"js-syntax\">'</span>OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\"><span class=\"js-syntax\">'</span>setAll<span class=\"js-syntax\">: </span>response contains status:200 and content:OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-keyword\">async </span><span class=\"js-blueword\">function</span> testSetPixel<span class=\"js-syntax\">(</span>expected<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> response<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>testBed.sendConduitPacket<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n    to<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>LedServer<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    topic<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>setPixel<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    message<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\"><span class=\"js-syntax\">'</span>0<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span> 25<span class=\"js-syntax\">,</span> 25<span class=\"js-syntax\">,</span> 52 <span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\"><span class=\"js-syntax\">'</span>1<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span> 100<span class=\"js-syntax\">,</span> 100<span class=\"js-syntax\">,</span> 100 <span class=\"js-syntax\">]</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  testBed.assert<span class=\"js-syntax\">(</span>response.status <span class=\"js-keyword\">===</span> 200 <span class=\"js-keyword\">&&</span> response.message.content <span class=\"js-keyword\">===</span> <span class=\"_string\"><span class=\"js-syntax\">'</span>OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\"><span class=\"js-syntax\">'</span>setPixel<span class=\"js-syntax\">: </span>response contains status:200 and content:OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Mocha/Chai"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\ndescribe<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Conduit topic<span class=\"js-syntax\">: </span>setPixel<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  it<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>should <span class=\"js-keyword\">return </span>200 / OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">const</span> response<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>testBed.sendConduitPacket<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      to<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>LedServer<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      topic<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>setPixel<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      message<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n        <span class=\"_string\"><span class=\"js-syntax\">'</span>0<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span> 10<span class=\"js-syntax\">,</span> 20<span class=\"js-syntax\">,</span> 30<span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n        <span class=\"_string\"><span class=\"js-syntax\">'</span>1<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>30<span class=\"js-syntax\">,</span> 50<span class=\"js-syntax\">,</span> 60<span class=\"js-syntax\">]</span>\n      <span class=\"js-syntax\">}</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n    expect<span class=\"js-syntax\">(</span>response.status<span class=\"js-syntax\">)</span>.to.equal<span class=\"js-syntax\">(</span>200<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    expect<span class=\"js-syntax\">(</span>response.message.content<span class=\"js-syntax\">)</span>.to.equal<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\ndescribe<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Conduit topic<span class=\"js-syntax\">: </span>setAll<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  it<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>should <span class=\"js-keyword\">return </span>200 / OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">const</span> response<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>testBed.sendConduitPacket<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      to<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>LedServer<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      topic<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>setAll<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n      message<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> all<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>64<span class=\"js-syntax\">,</span>64<span class=\"js-syntax\">,</span>64<span class=\"js-syntax\">]</span> <span class=\"js-syntax\">}</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n    expect<span class=\"js-syntax\">(</span>response.status<span class=\"js-syntax\">)</span>.to.equal<span class=\"js-syntax\">(</span>200<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    expect<span class=\"js-syntax\">(</span>response.message.content<span class=\"js-syntax\">)</span>.to.equal<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>OK<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "As a result, my script to run all the test suites of each Node app (after booting them all together locally) looks like a lot of this - all green, and no red!"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2018/02/screen-shot-2018-02-17-at-22-09-10.png"
    },
    {
      "type": "paragraph",
      "text": "Hopefully this new skill will enable me to write better code both personally and professionally in the future - I may even try out TDD for my next project!"
    }
  ]
}