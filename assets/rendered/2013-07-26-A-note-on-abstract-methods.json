{
  "fileName": "2013-07-26-A-note-on-abstract-methods.md",
  "title": "A note on abstract methods",
  "dateTime": "2013-07-26 00:04:13",
  "tags": [
    "Java"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "In developing the GClient (detailed in the preceeding post), I discovered for myself that the method to be implemented for some interfaces and object types (such as <code>run()</code> in a Runnable object) are done by declaring them as 'abstract' methods. This means when a programmer creates a new instance of that object, the abstract method that needs to be implemented is shown to be 'filled up' with context specific code. Below is an example:"
    },
    {
      "type": "paragraph",
      "text": "This is an abstract method from my 'PythonConnection' class:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-java\">Java</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Implement this to act on data received</span>\n<span class=\"comment\"> * @param data String containing the data received from the remote python host</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-keyword\">public</span> abstract <span class=\"js-keyword\">void</span> onReceive<span class=\"js-syntax\">(</span>String data<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "When a new PythonConnection object is created, the opportunity to implement <code>onReceive()</code> is shown as below:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-java\">Java</div>\n<pre><div class=\"code-block\">\nPythonConnection pyCon = new PythonConnection<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  @Override\n  <span class=\"js-keyword\">public</span> <span class=\"js-keyword\">void</span> onReceive<span class=\"js-syntax\">(</span>String data<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n<span class=\"comment\">    //Put code to use the 'data' String here!</span>\n<span class=\"comment\">    //Update UI, send a response etc...</span>\n\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Where does the 'data' String come from, you ask? Well when the underlying Thread receives data from the BufferedReader, it calls <code>onReceive()</code>, supplying the String read from the Reader and continues listening once <code>onReceive()</code> returns. Here is where that occurs in a typical server (such as in the GClient):"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-java\">Java</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Start the receiving thread that will call onReceive() when it has data</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-keyword\">private</span> <span class=\"js-keyword\">void</span> startListening<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n\n  receiveThread = new Thread<span class=\"js-syntax\">(</span>new Runnable<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n\n    @Override\n    <span class=\"js-keyword\">public</span> <span class=\"js-keyword\">void</span> run<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      listening = true<span class=\"js-syntax\">;</span>\n      System.out.println<span class=\"js-syntax\">(</span><span class=\"_string\">\"Ready to receive.\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n      while<span class=\"js-syntax\">(</span>listening<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        try <span class=\"js-syntax\">{</span>\n          String packet = fromPython.readLine<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n          if<span class=\"js-syntax\">(</span>packet != null<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n            onReceive<span class=\"js-syntax\">(</span>packet<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n          <span class=\"js-syntax\">}</span>\n        <span class=\"js-syntax\">}</span> catch <span class=\"js-syntax\">(</span>IOException e<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n          e.printStackTrace<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        <span class=\"js-syntax\">}</span>\n      <span class=\"js-syntax\">}</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  receiveThread.start<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Previously to get around this 'sending data across classes' problem (which got especially nasty when Threads came into it) I would either pass the object creating the abstract object or use some sort of 'shared static class', which wasn't ideal and generated problems of its own."
    },
    {
      "type": "paragraph",
      "text": "This is an example of one of the joys of exploring a language by using it! I foresee much use for this functionality."
    }
  ]
}