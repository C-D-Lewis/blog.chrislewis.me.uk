{
  "fileName": "2022-10-22-Meet-Norren-The-Tame-Discord-Bot.md",
  "title": "Meet Norren: The Tame Discord Bot",
  "dateTime": "2022-10-22 09:42",
  "tags": [
    "JavaScript",
    "Raspberry Pi"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "An idea I've had for a long time, but never found a practical use-case for is\ncreating a Discord bot. I see them all the time, sometimes performing useful\nfeatures or management for a Discord server, or just for amusement. After\nrecently adding some more novelty sounds to a soundboard webapp for my regular\ngaming group, we organically arrived at the idea of converting the soundboard\ninto a bot - and other gaming related ideas also quickly arrived soon\nafterwards."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Meet Norren"
    },
    {
      "type": "paragraph",
      "text": "After a couple of evenings trial-and-error with <code>discordjs</code> and its\npretty decent <a class=\"link\" target=\"_blank\" href=\"https://discordjs.guide/#before-you-begin\">documentation</a> (a\nrare example of example-based documentation that we need more of as a species)\nI produced a rudimentary bot. I named it Norren after a helpful guiding\ncharacter my brother thought up during our DnD campaign a couple of years ago."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-bot.png"
    },
    {
      "type": "paragraph",
      "text": "So, what can he do? As of writing, several things relating to playing novelty\nsounds and music, but also a few other useful functions for the server and\nwhile gaming. The <code>/help</code> command shows all the possibilities:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-help.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Architecture"
    },
    {
      "type": "paragraph",
      "text": "The first thing to note is that Discord's API has a notion of these commands\nas RESTful resources - meaning you can declare what they are so users can view\nand choose from them even while the bot is offline. The library makes the\nprocess of creating these easy:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> REST<span class=\"js-syntax\">,</span> SlashCommandBuilder<span class=\"js-syntax\">,</span> Routes <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>discord.js<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> clientId<span class=\"js-syntax\">,</span> token <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../config.json<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">[</span>SERVER_ID<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span><span class=\"js-blueword\">process</span>.argv.slice<span class=\"js-syntax\">(</span>2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"js-blueword\">const</span> commands<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">[</span>\n  <span class=\"js-keyword\">new </span>SlashCommandBuilder<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n   <span class=\"js-syntax\"> .</span>setName<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>roll<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n   <span class=\"js-syntax\"> .</span>setDescription<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Roll a d<n> die<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n   <span class=\"js-syntax\"> .</span>addNumberOption<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>option<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>option.setName<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>d<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n     <span class=\"js-syntax\"> .</span>setDescription<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>The die maximum value<span class=\"js-syntax\">,</span> such as d20<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span>\n     <span class=\"js-syntax\"> .</span>setRequired<span class=\"js-syntax\">(</span>true<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n\n<span class=\"comment\">  // Other command omitted for brevity</span>\n<span class=\"js-syntax\">]</span>\n <span class=\"js-syntax\"> .</span>map<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>command<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>command.toJSON<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"js-blueword\">const</span> rest<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">new </span>REST<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> version<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>10<span class=\"js-syntax\">'</span></span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>.setToken<span class=\"js-syntax\">(</span>token<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\nrest.put<span class=\"js-syntax\">(</span>Routes.applicationGuildCommands<span class=\"js-syntax\">(</span>clientId<span class=\"js-syntax\">,</span> SERVER_ID<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">{</span> body<span class=\"js-syntax\">: </span>commands <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>then<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span><span class=\"_string\">`Successfully registered $<span class=\"js-syntax\">{</span>data.length<span class=\"js-syntax\">}</span> application commands.`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n <span class=\"js-syntax\"> .</span>catch<span class=\"js-syntax\">(</span><span class=\"js-blueword\">console</span>.error<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The fact that these slash commands are registered on a per-server basis means\nwhen they are updated you must run the above for each server - but a quick bit\nof scripting takes care of that."
    },
    {
      "type": "paragraph",
      "text": "When a user wants to see how to use the <code>/roll</code> command as an\nexample, the Discord client can show them the format and arguments:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-roll.png"
    },
    {
      "type": "paragraph",
      "text": "Whatever text you choose to return from the command is relayed back to the\nchannel where the command was invoked, or as a message only the calling user\ncan see:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-results.png"
    },
    {
      "type": "paragraph",
      "text": "Another notable example in the context of the gaming group is a command that\nallows users to search the roll20.net compendium. The results are fetched\nand transformed into usable output for the response:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-search.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Parsing commands"
    },
    {
      "type": "paragraph",
      "text": "Handling commands is made easy by <code>discordjs</code> via events that are\ndelivered over WebSockets instantaneously to the bot process that is listening\nafter initial connection:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> Client<span class=\"js-syntax\">,</span> GatewayIntentBits <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>discord.js<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> token <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../../config.json<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Initialise discord.js client.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} opts - Function opts.</span>\n<span class=\"comment\"> * @param {Function} opts.onCommand - Callback on slash command received.</span>\n<span class=\"comment\"> * @param {Function} opts.onMessage - Callback on message received.</span>\n<span class=\"comment\"> * @returns {Promise}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> setupClient<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> onCommand<span class=\"js-syntax\">,</span> onMessage <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-keyword\">new </span>Promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>resolve<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">  // Create a new client instance</span>\n  <span class=\"js-blueword\">const</span> newClient<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">new </span>Client<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n    intents<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>\n      GatewayIntentBits.Guilds<span class=\"js-syntax\">,</span>\n      GatewayIntentBits.GuildMessages<span class=\"js-syntax\">,</span>\n      GatewayIntentBits.MessageContent<span class=\"js-syntax\">,</span>\n      GatewayIntentBits.GuildVoiceStates<span class=\"js-syntax\">,</span>\n      GatewayIntentBits.GuildMessageReactions<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // When ready</span>\n  newClient.once<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>ready<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    client<span class=\"js-keyword\"> = </span>newClient<span class=\"js-syntax\">;</span>\n    client.user.setStatus<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>online<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    log<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Connected to Discord<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    resolve<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // When a command received</span>\n  newClient.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>interactionCreate<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span><span class=\"js-keyword\">!</span>interaction.isChatInputCommand<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span> return<span class=\"js-syntax\">;</span>\n\n    <span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> commandName<span class=\"js-syntax\">,</span> user<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> username <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span> options <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>interaction<span class=\"js-syntax\">;</span>\n    <span class=\"js-keyword\">await </span>onCommand<span class=\"js-syntax\">(</span>commandName<span class=\"js-syntax\">,</span> interaction<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Server general message</span>\n  newClient.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>messageCreate<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> author<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> id<span class=\"js-syntax\">: </span>callerId <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span> mentions<span class=\"js-syntax\">,</span> content <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>interaction<span class=\"js-syntax\">;</span>\n    <span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> id<span class=\"js-syntax\">: </span>botId <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>getClient<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>.user<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // If mentioning me, and it wasn't me</span>\n    <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>mentions.users.get<span class=\"js-syntax\">(</span>botId<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">&&</span> callerId <span class=\"js-keyword\"><span class=\"js-keyword\">!</span>==</span> botId<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">return </span>onMessage<span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Some other chat going by</span>\n    <span class=\"js-keyword\">return </span>undefined<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Log in</span>\n  newClient.login<span class=\"js-syntax\">(</span>token<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The implementation of <code>setupClient</code> abstracts out a callback for when\na command or message mentioning the bot (and importantly isn't the bot\nitself - that was a messy event) is received, allowing application logic to be\neasily built upon that. For example, a separate handler file for each unique\ncommand addressable with a map:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">const</span> handleRoll<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/roll<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleSearch<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/search<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleAudio<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/audio<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleJoin<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/join<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleLeave<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/leave<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handlePin<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/pin<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleAsk<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/ask<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handleHelp<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/help<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> handlePing<span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../commands/ping<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> AUDIO_TYPE_SOUND<span class=\"js-syntax\">,</span> AUDIO_TYPE_MUSIC <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>require<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>../<span class=\"js-blueword\">const</span>ants<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Find the command handler function for the named command.</span>\n<span class=\"comment\"> * Corresponds to all those registered with deploy-slash-commands.js</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {string} name - Command name.</span>\n<span class=\"comment\"> * @returns {Function} handler function.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> getCommand<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>name<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> map<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    roll<span class=\"js-syntax\">: </span>handleRoll<span class=\"js-syntax\">,</span>\n    search<span class=\"js-syntax\">: </span>handleSearch<span class=\"js-syntax\">,</span>\n    sound<span class=\"js-syntax\">: </span><span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>handleAudio<span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">,</span> AUDIO_TYPE_SOUND<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    music<span class=\"js-syntax\">: </span><span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>handleAudio<span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">,</span> AUDIO_TYPE_MUSIC<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    join<span class=\"js-syntax\">: </span>handleJoin<span class=\"js-syntax\">,</span>\n    leave<span class=\"js-syntax\">: </span>handleLeave<span class=\"js-syntax\">,</span>\n    pin<span class=\"js-syntax\">: </span>handlePin<span class=\"js-syntax\">,</span>\n    ask<span class=\"js-syntax\">: </span>handleAsk<span class=\"js-syntax\">,</span>\n    help<span class=\"js-syntax\">: </span>handleHelp<span class=\"js-syntax\">,</span>\n    ping<span class=\"js-syntax\">: </span>handlePing<span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span><span class=\"js-keyword\">!</span>map<span class=\"js-syntax\">[</span>name<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span> throw <span class=\"js-keyword\">new </span>Error<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>I dont know that command<span class=\"js-syntax\">,</span> but I should know it<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">return </span>map<span class=\"js-syntax\">[</span>name<span class=\"js-syntax\">]</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Thus, <code>onCommand</code> is easily implemented using the aforementioned\ncallback from the client module:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * When a command is received.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {string} name - Command name.</span>\n<span class=\"comment\"> * @param {object} interaction - Discord.js interaction object.</span>\n<span class=\"comment\"> * @returns {Function|AsyncFunction} Handler that returns reply text.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> onCommand<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>name<span class=\"js-syntax\">,</span> interaction<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-keyword\">try </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">const</span> command<span class=\"js-keyword\"> = </span>getCommand<span class=\"js-syntax\">(</span>name<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-keyword\">return </span><span class=\"js-keyword\">await </span>command<span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span> <span class=\"js-keyword\">catch </span><span class=\"js-syntax\">(</span>e<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">const</span> err<span class=\"js-keyword\"> = </span><span class=\"_string\">`⚠️ $<span class=\"js-syntax\">{</span>e.message<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">;</span>\n    log<span class=\"js-syntax\">(</span>err<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-keyword\">return </span>replyHidden<span class=\"js-syntax\">(</span>interaction<span class=\"js-syntax\">,</span> err<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "<code>replyHidden</code> is a convenience method to reply only to the calling\nuser instead of spamming the channel for all users."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Auto reactions"
    },
    {
      "type": "paragraph",
      "text": "When a message is received, the bot has the ability to add emoji reactions to it\nwhich are part of the configuration file. As you can see, both built-in and\ncustom emojis are supported, once you find out the custom emoji's ID:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-syntax\">{</span>\n  <span class=\"_string\">\"token\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"TAyNzkzOD......\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"clientId\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"10279382...\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"guildId\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"10279363...\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"reactions\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>\n    <span class=\"js-syntax\">{</span> <span class=\"_string\">\"trigger\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"golden boi\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"emoji\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"<:Happy:831178336830881792>\"</span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">{</span> <span class=\"_string\">\"trigger\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"hello\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"emoji\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"👋\"</span><span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"onJoinSound\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"hohohotravellers.opus\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"onLeaveSound\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"thanksforstaffmagnus.opus\"</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Thus, when a message contains the <code>trigger</code> string, the corresponding\n</code>emoji</code> is used in a reaction. All are evaluated concurrently,\nallowing one message to have many reactions:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2022/10/norren-react.png"
    },
    {
      "type": "paragraph",
      "text": "Also alluded to in the configuration are sound file names for when Norren joins\nor leaves..."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Giving Norren a voice"
    },
    {
      "type": "paragraph",
      "text": "...a voice session - this is the last major trick up his sleeve, allowing the\nbot to contribute the aforementioned soundboard sounds and music pieces, which\ncould also provide atmosphere to future DnD sessions over Discord. This is made\nquite easy by the <code>@discordjs/voice</code> package which integrates with\n<code>discordjs</code> itself, consuming the voice and channel information\nfrom the command and message events."
    },
    {
      "type": "paragraph",
      "text": "Because the bot can be invited to multiple Discord servers, I wrapped up the\nprocess of joining and leaving, plus the callback-based connection and audio\nplayer state and events into an easier to use <code>VoiceAgent</code> object,\nwhich is instantiated on a per-channel (or 'guild') basis:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">// Cache agents for each server</span>\n<span class=\"js-blueword\">const</span> voiceAgents<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span><span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Prepare the voice agent.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @returns {object} The VoiceAgent.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> getVoiceAgent<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>voice<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> id<span class=\"js-syntax\">: </span>guildId <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>voice.guild<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // One agent per guild</span>\n  <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span><span class=\"js-keyword\">!</span>voiceAgents<span class=\"js-syntax\">[</span>guildId<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    voiceAgents<span class=\"js-syntax\">[</span>guildId<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span>VoiceAgent<span class=\"js-syntax\">(</span>voice<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n\n  <span class=\"js-keyword\">return </span>voiceAgents<span class=\"js-syntax\">[</span>guildId<span class=\"js-syntax\">]</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The entire <code>VoiceAgent</code> constructor is shown here, and as you can see\nmakes it a lot easier to work with and maintain the events and state. Hooray\nfor encapsulation! The most important thing is that a connection must be in\nthe correct state for playing audio, and the audio player must be in the correct\nstate to play the sound or music requested:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Abstract away all state and internals related to handling voice connection</span>\n<span class=\"comment\"> * and player status.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} voice - discord.js voice object.</span>\n<span class=\"comment\"> * @returns {object}</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> VoiceAgent<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>voice<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> id<span class=\"js-syntax\">: </span>guildId <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>voice.guild<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> player<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> readyToPlay<span class=\"js-keyword\"> = </span>false<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> willStayConnected<span class=\"js-keyword\"> = </span>false<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> playEndCb<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  /**</span>\n<span class=\"comment\">   * Stop and disconnect.</span>\n<span class=\"comment\">   */</span>\n  <span class=\"js-blueword\">const</span> leaveAndReset<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    <span class=\"js-keyword\">try </span><span class=\"js-syntax\">{</span>\n      <span class=\"js-blueword\">const</span> connection<span class=\"js-keyword\"> = </span>getVoiceConnection<span class=\"js-syntax\">(</span>guildId<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-keyword\">await </span>connection.disconnect<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-keyword\">await </span>connection.destroy<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Stopped and disconnected<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span> <span class=\"js-keyword\">catch </span><span class=\"js-syntax\">(</span>e<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\">`Error disconnecting<span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>e.message<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n\n    readyToPlay<span class=\"js-keyword\"> = </span>false<span class=\"js-syntax\">;</span>\n    willStayConnected<span class=\"js-keyword\"> = </span>false<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  /**</span>\n<span class=\"comment\">   * Prepare the player.</span>\n<span class=\"comment\">   */</span>\n  <span class=\"js-blueword\">const</span> preparePlayer<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    player<span class=\"js-keyword\"> = </span>createAudioPlayer<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> behaviors<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> noSubscriber<span class=\"js-syntax\">: </span>NoSubscriberBehavior.Play <span class=\"js-syntax\">}</span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    getVoiceConnection<span class=\"js-syntax\">(</span>guildId<span class=\"js-syntax\">)</span>.subscribe<span class=\"js-syntax\">(</span>player<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Play selected sound</span>\n    player.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>stateChange<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>old<span class=\"js-syntax\">,</span> _new<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n      <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>old.status <span class=\"js-keyword\">===</span> _new.status<span class=\"js-syntax\">)</span> return<span class=\"js-syntax\">;</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\">`Audio<span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>old.status<span class=\"js-syntax\">}</span> -> $<span class=\"js-syntax\">{</span>_new.status<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">      // Finished</span>\n      <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>_new.status <span class=\"js-keyword\">===</span> <span class=\"_string\"><span class=\"js-syntax\">'</span>idle<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>playEndCb<span class=\"js-syntax\">)</span> playEndCb<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span><span class=\"js-keyword\">!</span>willStayConnected<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">await </span>leaveAndReset<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    player.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>error<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>error<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Player error:<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      log<span class=\"js-syntax\">(</span>error<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-keyword\">await </span>leaveAndReset<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n    readyToPlay<span class=\"js-keyword\"> = </span>true<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  /**</span>\n<span class=\"comment\">   * Set whether to stay connected after a sound completes.</span>\n<span class=\"comment\">   *</span>\n<span class=\"comment\">   * @param {boolean} stayConnected - Whether to stay connected after sounds play this join.</span>\n<span class=\"comment\">   */</span>\n  <span class=\"js-blueword\">const</span> setStayConnected<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>stayConnected<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n    willStayConnected<span class=\"js-keyword\"> = </span>stayConnected<span class=\"js-syntax\">;</span>\n    log<span class=\"js-syntax\">(</span><span class=\"_string\">`willStayConnected<span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>stayConnected<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  /**</span>\n<span class=\"comment\">   * Join a voice connection.</span>\n<span class=\"comment\">   *</span>\n<span class=\"comment\">   * @returns {Promise}</span>\n<span class=\"comment\">   */</span>\n  <span class=\"js-blueword\">const</span> join<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-keyword\">new </span>Promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>resolve<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">    // Already connected</span>\n    <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>readyToPlay<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      resolve<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      return<span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n\n<span class=\"comment\">    // Prepare connection</span>\n    <span class=\"js-blueword\">const</span> connection<span class=\"js-keyword\"> = </span>joinVoiceChannel<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n      channelId<span class=\"js-syntax\">: </span>voice.channel.id<span class=\"js-syntax\">,</span>\n      guildId<span class=\"js-syntax\">: </span>voice.guild.id<span class=\"js-syntax\">,</span>\n      adapterCreator<span class=\"js-syntax\">: </span>voice.guild.voiceAdapterCreator<span class=\"js-syntax\">,</span>\n      selfDeaf<span class=\"js-syntax\">: </span>false<span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    connection.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>stateChange<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span>old<span class=\"js-syntax\">,</span> _new<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n      <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>old.status <span class=\"js-keyword\">===</span> _new.status<span class=\"js-syntax\">)</span> return<span class=\"js-syntax\">;</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\">`Connection<span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>old.status<span class=\"js-syntax\">}</span> -> $<span class=\"js-syntax\">{</span>_new.status<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">      // When connected</span>\n      <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>_new.status <span class=\"js-keyword\">===</span> <span class=\"_string\"><span class=\"js-syntax\">'</span>ready<span class=\"js-syntax\">'</span></span> <span class=\"js-keyword\">&&</span> _new.status <span class=\"js-keyword\"><span class=\"js-keyword\">!</span>==</span> old.status<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        preparePlayer<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        resolve<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    connection.on<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>error<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span>error<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n      log<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>Connection error:<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> error.message<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      leaveAndReset<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  /**</span>\n<span class=\"comment\">   * Play a given sound.</span>\n<span class=\"comment\">   *</span>\n<span class=\"comment\">   * @param {string} soundName - Name of the sound file.</span>\n<span class=\"comment\">   * @returns {Promise}</span>\n<span class=\"comment\">   */</span>\n  <span class=\"js-blueword\">const</span> play<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>soundName<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-keyword\">new </span>Promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>resolve<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">    // Allow waiting for playback</span>\n    playEndCb<span class=\"js-keyword\"> = </span>resolve<span class=\"js-syntax\">;</span>\n\n    player.play<span class=\"js-syntax\">(</span>getAudioResource<span class=\"js-syntax\">(</span>soundName<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">return </span><span class=\"js-syntax\">{</span>\n    join<span class=\"js-syntax\">,</span>\n    leave<span class=\"js-syntax\">: </span>leaveAndReset<span class=\"js-syntax\">,</span>\n    play<span class=\"js-syntax\">,</span>\n    setStayConnected<span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "There is also functionality for\ninstructing Norren to leave or rejoin the user's voice channel, or leave\nimmediately after playing a sound, which can lead to some quite comedic moments\nwhen timing is good."
    },
    {
      "type": "paragraph",
      "text": "<video\n  src=\"assets/media/2022/10/norren-scum.mp4\"\n  controls=\"controls\"\n  width=\"50%\">"
    },
    {
      "type": "paragraph",
      "text": "The usual way of using audio is to ask Norren to join with <code>/join</code>\nand leave when we're done with him with <code>/leave</code>. It's nice to be\nable to quickly react with the soundboard sounds before the timing is lost,\nthough usually that doesn't stop me... Plus the lack of constant join/leave\nsound effects from Discord doesn't confuse us with when real people join or\nleave, saving some awkward moments as well."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "Another lengthy post, but I felt it was important to show a lot of the relevant\ncode, especially in places where I solved some of the pain points of building\nthe bot - things like abstracting away complexity and allowing modular scaling\nof the app and working with multiple servers. Keen-eyed readers will have\nalready spotted the link to the source code, so feel free to copy, tweak, or\njust learn how to do this yourself - it's a lot of fun!"
    }
  ]
}