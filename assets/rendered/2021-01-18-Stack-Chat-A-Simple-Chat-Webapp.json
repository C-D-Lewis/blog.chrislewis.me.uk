{
  "title": "Stack Chat - A Simple Chat Webapp",
  "fileName": "2021-01-18-Stack-Chat-A-Simple-Chat-Webapp.md",
  "dateTime": "2021-01-18 19:05",
  "tags": [
    "React",
    "JavaScript",
    "AWS"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "I know it's a cliche use-case, but a simple chat application is something I have\nyet to try, and I like trying common things in a reasonably from-scratch way to\nsee how they work and tackle some relatively 'safe' problems myself as a way of\nkeeping my problem solving skills sharp. Sure, as with this example, common\nuse-cases have been well-solved, but it's still a fun and rewarding experience."
    },
    {
      "type": "paragraph",
      "text": "And as with all such projects, I get ultimate say over the look, functionality,\nfeatures, schema, etc. and can call upon the result for personal use as well as\nsharing with any other interested parties."
    },
    {
      "type": "paragraph",
      "text": "And if the world starts to end and I need a private, known quantity for\ncommunication, well..."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Getting Started"
    },
    {
      "type": "paragraph",
      "text": "So after a quick refresher on WebSockets after my\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/pge/blob/master/pge-ws-server/app.js\">last encounter for PGE games</a>\nI got stuck in. There were three main objectives:"
    },
    {
      "type": "paragraph",
      "text": "1. A server that receives messages from clients, and re-transmits them to other clients."
    },
    {
      "type": "paragraph",
      "text": "2. A simple frontend webapp that allows users to identify themselves, see recent chat messages, and send new messages."
    },
    {
      "type": "paragraph",
      "text": "3. Be simple to set up and deploy."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Backend"
    },
    {
      "type": "paragraph",
      "text": "As it turns out, a WebSockets server that just has to re-broadcast messages\nisn't very complicated:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Broadcast data to all clients.</span>\n<span class=\"comment\"> * </span>\n<span class=\"comment\"> * @param {string} data - Data to send</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> broadcast<span class=\"js-keyword\"> = </span>data<span class=\"js-keyword\"> => </span>server.clients.forEach<span class=\"js-syntax\">(</span>p<span class=\"js-keyword\"> => </span>p.send<span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * When a client sends a message.</span>\n<span class=\"comment\"> * </span>\n<span class=\"comment\"> * @param {object} client - Client that sent the message.</span>\n<span class=\"comment\"> * @param {string} data - The message.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">const</span> onClientMessage<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>client<span class=\"js-syntax\">,</span> data<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span><span class=\"_string\">`message<span class=\"js-syntax\">: </span>$<span class=\"js-syntax\">{</span>data<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Re-broadcast message to all clients</span>\n  broadcast<span class=\"js-syntax\">(</span>data<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Other server starting and connection listening code...</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "If in the future the server cares about who sends the messages, which channels\nexist and contain which users, then some more filtering, caching of user/channel\ndata will be required - but this is a task for future me!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Frontend"
    },
    {
      "type": "paragraph",
      "text": "As a quick project and demonstrator, I chose React as a familiar and\nquick-to-start framework for the chat webapp itself. I opted to not use higher\nlevel concepts such as routing and pages, or a proper state store such as\n<code>react-redux</code> since all I needed was two states:"
    },
    {
      "type": "paragraph",
      "text": "1. Connecting and choosing a username."
    },
    {
      "type": "paragraph",
      "text": "2. Sending messages and viewing incoming messages in a list."
    },
    {
      "type": "paragraph",
      "text": "For this, passing component state and conditionally showing two main layouts\nwas enough to get things going. I already had an idea in my head how the UI\nshould be clean, with an emphasis on colors to denote participants and leaving\nthe space relatively clutter free. Here's an example conversation some may\nfind familiar:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/stack-chat-mobile.png"
    },
    {
      "type": "paragraph",
      "text": "And of course, use of Flexbox means that a simple column app can also easily\nlook good on larger screens too:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/stack-chat-desktop.png"
    },
    {
      "type": "paragraph",
      "text": "Evidently, not even a simple UI and uncluttered workspace can guarantee that\nany attempt at conversion is completely successful..."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Communication"
    },
    {
      "type": "paragraph",
      "text": "The use of WebSockets in the frontend is also nice and simple - and a little\nabstraction in the right places always goes a long way to making shared code\naccessible and useful! For example, the connection process:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">/** Generated config.js using webpack at build time */</span>\n<span class=\"js-blueword\">const</span> <span class=\"js-syntax\">{</span> HOST<span class=\"js-syntax\">,</span> PORT <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span><span class=\"js-blueword\">window</span>.config<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Connect to the configured server.</span>\n<span class=\"comment\"> * </span>\n<span class=\"comment\"> * @param {function} setConnectedState - Callback to update connectedState.</span>\n<span class=\"comment\"> * @param {function} onWebsocketMessage - Callback when a message is received.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-keyword\">export </span><span class=\"js-blueword\">const</span> connect<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>setConnectedState<span class=\"js-syntax\">,</span> onWebsocketMessage<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> protocol<span class=\"js-keyword\"> = </span>HOST.includes<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>https<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> ? </span><span class=\"_string\"><span class=\"js-syntax\">'</span>wss://<span class=\"js-syntax\">'</span></span><span class=\"js-keyword\"> <span class=\"js-syntax\">: </span></span><span class=\"_string\"><span class=\"js-syntax\">'</span>ws://<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">;</span>\n  \n  <span class=\"js-keyword\">try </span><span class=\"js-syntax\">{</span>\n    socket<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">new </span>WebSocket<span class=\"js-syntax\">(</span><span class=\"_string\">`$<span class=\"js-syntax\">{</span>protocol<span class=\"js-syntax\">}</span>$<span class=\"js-syntax\">{</span>HOST<span class=\"js-syntax\">}</span>:$<span class=\"js-syntax\">{</span>PORT<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    \n    socket.addEventListener<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>open<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>setConnectedState<span class=\"js-syntax\">(</span>true<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    socket.addEventListener<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>message<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> event<span class=\"js-keyword\"> => </span>onWebsocketMessage<span class=\"js-syntax\">(</span>JSON.parse<span class=\"js-syntax\">(</span>event.data<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    socket.addEventListener<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>error<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span>event<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n      alert<span class=\"js-syntax\">(</span>event<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      setConnectedState<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> error<span class=\"js-syntax\">: </span>event <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span> <span class=\"js-keyword\">catch </span><span class=\"js-syntax\">(</span>err<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    <span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span>err<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    setConnectedState<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> error<span class=\"js-syntax\">: </span>err.message <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    setTimeout<span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span>alert<span class=\"js-syntax\">(</span>err.stack<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> 500<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "And sending messages uses an established message schema (I do like a good\nmessage schema...):"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Send a chat event message to the server.</span>\n<span class=\"comment\"> * </span>\n<span class=\"comment\"> * @param {string} userName - This client's userName.</span>\n<span class=\"comment\"> * @param {string} draft - Draft message.</span>\n<span class=\"comment\"> * @param {string} color - This client's color.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-keyword\">export </span><span class=\"js-blueword\">const</span> sendMessage<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>userName<span class=\"js-syntax\">,</span> draft<span class=\"js-syntax\">,</span> color<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> event<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    type<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>ChatMessage<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    data<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      from<span class=\"js-syntax\">: </span>userName<span class=\"js-syntax\">,</span>\n      content<span class=\"js-syntax\">: </span>draft<span class=\"js-syntax\">,</span>\n      backgroundColor<span class=\"js-syntax\">: </span>color<span class=\"js-syntax\">,</span>\n      timestamp<span class=\"js-syntax\">: </span>Date.now<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n  socket.send<span class=\"js-syntax\">(</span>JSON.stringify<span class=\"js-syntax\">(</span>event<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This means that all messages sent can be easily interpreted by both the backend\n(who may need to perform filtering in the future), as well as all the identical\nconnected clients."
    },
    {
      "type": "paragraph",
      "text": "And lastly, it also help define special messages that also use the schema:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Send an event message reporting this new user.</span>\n<span class=\"comment\"> * </span>\n<span class=\"comment\"> * @param {string} userName - This client's username.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-keyword\">export </span><span class=\"js-blueword\">const</span> reportNewUser<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>userName<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const</span> event<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    type<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>NewClient<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    data<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> userName <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n  socket.send<span class=\"js-syntax\">(</span>JSON.stringify<span class=\"js-syntax\">(</span>event<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Messages using this schema can be seen in the server logs:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"none\" -->\n<pre><div class=\"code-block\">\nmessage: {\"type\":\"NewClient\",\"data\":{\"userName\":\"Dr Rumack\"}}\nmessage: {\"type\":\"NewClient\",\"data\":{\"userName\":\"Captain Oveur\"}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Dr Rumack\",\"content\":\"Captain, how soon can you land?\",\"backgroundColor\":\"rgb(109,52,62)\",\"timestamp\":1610983392283}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Captain Oveur\",\"content\":\"I can't tell\",\"backgroundColor\":\"rgb(7,177,67)\",\"timestamp\":1610983399336}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Dr Rumack\",\"content\":\"You can tell me, I'm a doctor.\",\"backgroundColor\":\"rgb(109,52,62)\",\"timestamp\":1610983409378}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Captain Oveur\",\"content\":\"No, I mean I'm just not sure.\",\"backgroundColor\":\"rgb(7,177,67)\",\"timestamp\":1610983419296}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Dr Rumack\",\"content\":\"Well, can't you take a guess?\",\"backgroundColor\":\"rgb(109,52,62)\",\"timestamp\":1610983428647}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Captain Oveur\",\"content\":\"Well, not for another two hours.\",\"backgroundColor\":\"rgb(7,177,67)\",\"timestamp\":1610983442314}}\nmessage: {\"type\":\"ChatMessage\",\"data\":{\"from\":\"Dr Rumack\",\"content\":\"You can't take a guess for another two hours?\",\"backgroundColor\":\"rgb(109,52,62)\",\"timestamp\":1610983453649}}\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Future ideas"
    },
    {
      "type": "paragraph",
      "text": "For now it's relatively barebones. And nobody is clamouring to use it, but as\nwith all my projects I have other ideas for improving it:"
    },
    {
      "type": "paragraph",
      "text": "1. User login"
    },
    {
      "type": "paragraph",
      "text": "2. Discrete channels to separate chats, such as <code>#captains_chat</code> in the URL."
    },
    {
      "type": "paragraph",
      "text": "3. Automated deployment with Terraform and CloudFront, using configuration and pipeline code from <a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/pixels-with-friends\">other recent projects</a>."
    },
    {
      "type": "paragraph",
      "text": "As always, check out all the source code in the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/stack-chat\">GitHub repository</a>."
    }
  ]
}