{
  "title": "Raspberry Pi: IP by E-mail",
  "fileName": "2013-09-28-Raspberry-Pi-IP-by-E-mail.md",
  "dateTime": "2013-09-28 00:01:38",
  "tags": [
    "Raspberry Pi"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "I <a title=\"Raspberry Pi: IP Address to LCD Display\" href=\"http://ninedof.wordpress.com/2013/07/13/raspberry-pi-ip-address-to-lcd-display/\">wrote a while ago</a> about a mechanism to locate and connect to a <a title=\"Wikipedia - Headless\" href=\"http://en.wikipedia.org/wiki/Headless_computer\">headless</a> Raspberry Pi over Ethernet using an LCD display and some start-up code."
    },
    {
      "type": "paragraph",
      "text": "Well today I broke it while preparing to move house (and use it in it's intended situation!), which was bad news. Listen to your GND markings, people!"
    },
    {
      "type": "paragraph",
      "text": "But a moment's search for a replacement strategy yielded another idea. Nothing original by any means, but something new to my programming adventures thus far: Get the IP address by e-mail on boot!"
    },
    {
      "type": "paragraph",
      "text": "Looking at a Raspberry Pi as it boots you will see the Ethernet port is initialized pretty early on in the boot procedure. A quick Google search revealed the existence of the '<a title=\"Python 2.7 SMTPLib\" href=\"http://docs.python.org/2/library/smtplib.html\">smtplib</a>' module included with Python, which I leveraged to make this happen. Here is the final code (get_ip_address() found <a title=\"Get IP Address\" href=\"code.activestate.com/recipes/439094-get-the-ip-address-associated-with-a-network-inter/\">here</a>):"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"python\" -->\n<pre><div class=\"code-block\">\n<span class=\"js-keyword\">import </span>smtplib\n<span class=\"js-keyword\">import </span>struct\n<span class=\"js-keyword\">import </span>socket\n<span class=\"js-keyword\">import </span>fcntl\n\nmsg<span class=\"js-keyword\"> = </span><span class=\"_string\">\"From RPi Python\"</span>\n\n<span class=\"python-blue\">def </span><span class=\"python-green\">get_ip_address</span><span class=\"js-syntax\"><span class=\"js-syntax\">(</span></span><span class=\"python-orange\">ifname</span><span class=\"js-syntax\"><span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span></span>\n  s<span class=\"js-keyword\"> = </span>socket.socket<span class=\"js-syntax\">(</span>socket.AF_INET<span class=\"js-syntax\">,</span> socket.SOCK_DGRAM<span class=\"js-syntax\">)</span>\n  return socket.inet_ntoa<span class=\"js-syntax\">(</span>fcntl.ioctl<span class=\"js-syntax\">(</span>\n    s.fileno<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> 0x8915<span class=\"js-syntax\">,</span> # SIOCGIFADDR\n    struct.pack<span class=\"js-syntax\">(</span><span class=\"_string\">'256s'</span><span class=\"js-syntax\">,</span> ifname<span class=\"js-syntax\">[</span><span class=\"js-syntax\">:</span>15<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">)</span><span class=\"js-syntax\">[</span>20<span class=\"js-syntax\">:</span>24<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span>\n\nfromaddr<span class=\"js-keyword\"> = </span><from address>\ntoaddr<span class=\"js-keyword\"> = </span><to address>\n\nmsg<span class=\"js-keyword\"> = </span><span class=\"_string\"><span class=\"_string\">\"\"</span></span>\"RPi IP is  %s<span class=\"_string\"><span class=\"_string\">\"\"</span></span>\" % get_ip_address<span class=\"js-syntax\">(</span><span class=\"_string\">'eth0'</span><span class=\"js-syntax\">)</span>\n\nusername<span class=\"js-keyword\"> = </span><username>\npassword<span class=\"js-keyword\"> = </span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Sending IP<span class=\"js-syntax\">:</span> %s to %s\"</span> % <span class=\"js-syntax\">(</span>get_ip_address<span class=\"js-syntax\">(</span><span class=\"_string\">'eth0'</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> toaddr<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Opening connection...\"</span><span class=\"js-syntax\">)</span>\nserver<span class=\"js-keyword\"> = </span>smtplib.SMTP<span class=\"js-syntax\">(</span><span class=\"_string\">'smtp.gmail.com<span class=\"js-syntax\">:</span>587'</span><span class=\"js-syntax\">)</span>\nserver.ehlo<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\nserver.starttls<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\nserver.ehlo<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Logging in...\"</span><span class=\"js-syntax\">)</span>\nserver.login<span class=\"js-syntax\">(</span>username<span class=\"js-syntax\">,</span> password<span class=\"js-syntax\">)</span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Sending message<span class=\"js-syntax\">:</span> %s\"</span> % msg<span class=\"js-syntax\">)</span>\nserver.sendmail<span class=\"js-syntax\">(</span>fromaddr<span class=\"js-syntax\">,</span> toaddr<span class=\"js-syntax\">,</span> msg<span class=\"js-syntax\">)</span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Closing connection...\"</span><span class=\"js-syntax\">)</span>\nserver.close<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n\nprint<span class=\"js-syntax\">(</span><span class=\"_string\">\"Sent.\"</span><span class=\"js-syntax\">)</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The next step is to make it run on boot, which only involved writing this script (called ipmailboot.sh):"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"python\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">#!/usr/bin/python</span>\n\nsudo python ~/python/ipmail.py\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Then changing the permissions for execution:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"python\" -->\n<pre><div class=\"code-block\">\n sudo chmod 755 ipmailboot.sh\n </div></pre>"
    },
    {
      "type": "paragraph",
      "text": "And then registering it to run on boot using <code>update-rc.d ipmailboot.sh defaults</code>."
    },
    {
      "type": "paragraph",
      "text": "So, nothing revolutionary, but when I move house and find the router is nowhere near a TV, all I'll have to do is connect it to the network with an Ethernet cable, power on and wait for the email to arrive (on my Pebble watch, no less!)"
    }
  ]
}