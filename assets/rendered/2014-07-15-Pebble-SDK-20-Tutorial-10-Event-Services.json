{
  "fileName": "2014-07-15-Pebble-SDK-20-Tutorial-10-Event-Services.md",
  "title": "Pebble SDK 2.0 Tutorial #10: Event Services",
  "dateTime": "2014-07-15 14:16:42",
  "tags": [
    "Pebble"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "<strong>Required Reading"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #1: Your First Watchapp\" href=\"http://ninedof.wordpress.com/2013/12/02/pebble-sdk-2-0-tutorial-1-your-first-watchapp/\">Pebble SDK 2.0 Tutorial #1: Your First Watchapp</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #2: Telling the Time.\" href=\"http://ninedof.wordpress.com/2013/12/18/pebble-sdk-2-0-tutorial-2-telling-the-time/\">Pebble SDK 2.0 Tutorial #2: Telling the Time</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #3: Images and Fonts\" href=\"http://ninedof.wordpress.com/2013/12/22/pebble-sdk-2-0-tutorial-3-images-and-fonts/\">Pebble SDK 2.0 Tutorial #3: Images and Fonts</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #4: Animations and Timers\" href=\"http://ninedof.wordpress.com/2013/12/29/pebble-sdk-2-0-tutorial-4-animations-and-timers/\">Pebble SDK 2.0 Tutorial #4: Animations and Timers</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations\" href=\"http://ninedof.wordpress.com/2014/01/11/pebble-sdk-2-0-tutorial-5-buttons-and-vibrations/\">Pebble SDK 2.0 Tutorial #5: Buttons and Vibrations</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS\" href=\"http://ninedof.wordpress.com/2014/02/02/pebble-sdk-2-0-tutorial-6-appmessage-for-pebblekit-js/\">Pebble SDK 2.0 Tutorial #6: AppMessage for PebbleKit JS</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #7: MenuLayers\" href=\"http://ninedof.wordpress.com/2014/03/13/pebble-sdk-2-0-tutorial-7-menulayers/\">Pebble SDK 2.0 Tutorial #7: MenuLayers</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #8: Android App Integration\" href=\"http://ninedof.wordpress.com/2014/04/03/pebble-sdk-2-0-tutorial-8-android-app-integration/\">Pebble SDK 2.0 Tutorial #8: Android App Integration</a>"
    },
    {
      "type": "paragraph",
      "text": "<a title=\"Pebble SDK 2.0 Tutorial #9: App Configuration\" href=\"http://ninedof.wordpress.com/2014/05/24/pebble-sdk-2-0-tutorial-9-app-configuration/\">Pebble SDK 2.0 Tutorial #9: App Configuration</a>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Introduction"
    },
    {
      "type": "paragraph",
      "text": "In this section of the tutorial series, I will be covering some of the Event Services introduced in the 2.0 version of the Pebble SDK which have been oft requested due to their popularity in newer, interactive watchfaces. Namely:"
    },
    {
      "type": "paragraph",
      "text": "• Bluetooth Connection Service"
    },
    {
      "type": "paragraph",
      "text": "• Battery State Service"
    },
    {
      "type": "paragraph",
      "text": "• Accelerometer Service (tap and raw)"
    },
    {
      "type": "paragraph",
      "text": "• App Focus Service (not covered, but works <strong>identically</strong> to the Bluetooth Connection Service)"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Setup"
    },
    {
      "type": "paragraph",
      "text": "To begin with, we will be using the blank template from before, shown below for convenience. Create a new CloudPebble project and start a new C file with the template as its contents:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n#include\n\n<span class=\"js-keyword\">static</span> Window* window<span class=\"js-syntax\">;</span>\n\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>window_load<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>window_unload<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>init<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  window<span class=\"js-keyword\"> = </span>window_create<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  WindowHandlers handlers<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n    .load<span class=\"js-keyword\"> = </span>window_load<span class=\"js-syntax\">,</span>\n    .unload<span class=\"js-keyword\"> = </span>window_unload\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n  window_set_window_handlers<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">,</span> <span class=\"js-syntax\">(</span>WindowHandlers<span class=\"js-syntax\">)</span> handlers<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  window_stack_push<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">,</span><span class=\"js-blueword\"> true</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>deinit<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  window_destroy<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">int </span>main<span class=\"js-syntax\">(</span>void<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  init<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  app_event_loop<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  deinit<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Bluetooth Connection Service\nThe first Event Service we will be using is the Bluetooth Connection Service, which allows us to see the current connection status as well as subscribe to updates (only while Bluetooth is actually connected, so be careful with debug logs), much in the same way as with the <code>TickTimerService</code>. Firstly, we will create a <code>TextLayer</code> in <code>window_load()</code> to use for showing the events happening. First is the global pointer:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> TextLayer *bt_layer<span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "then creation proper in <code>window_load()</code>. Note the use of <code>bluetooth_connection_service_peek()</code> to show the state of the connection at the time of creation. As always we also add the corresponding destruction function call to free memory:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>window_load<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n<span class=\"comment\">  //Setup BT Layer</span>\n  bt_layer<span class=\"js-keyword\"> = </span>text_layer_create<span class=\"js-syntax\">(</span>GRect<span class=\"js-syntax\">(</span>5<span class=\"js-syntax\">,</span> 5<span class=\"js-syntax\">,</span> 144<span class=\"js-syntax\">,</span> 30<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  text_layer_set_font<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">,</span> fonts_get_system_font<span class=\"js-syntax\">(</span>FONT_KEY_GOTHIC_18<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>bluetooth_connection_service_peek<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-keyword\">== </span>true<span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">{</span>\n    text_layer_set_text<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"BT<span class=\"js-syntax\">:</span> CONNECTED\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n <span class=\"js-keyword\"> else</span>\n  <span class=\"js-syntax\">{</span>\n    text_layer_set_text<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"BT<span class=\"js-syntax\">:</span> DISCONNECTED\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n  layer_add_child<span class=\"js-syntax\">(</span>window_get_root_layer<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> text_layer_get_layer<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>window_unload<span class=\"js-syntax\">(</span>Window *window<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  text_layer_destroy<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Next we will subscribe to the <code>BluetoothConnectionService</code> to update this <code>TextLayer</code> whenever the status of the Bluetooth connection to the phone changes. Like a <code>TickHandler</code>, we start by creating a function to use as a handler with the correct signature, and fill it with logic to change the text displayed. This should be placed before <code>init()</code>, where it will be registered:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>bt_handler<span class=\"js-syntax\">(</span><span class=\"js-blueword\">bool </span>connected<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  <span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>connected <span class=\"js-keyword\">== </span>true<span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">{</span>\n    text_layer_set_text<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"BT<span class=\"js-syntax\">:</span> CONNECTED\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n <span class=\"js-keyword\"> else</span>\n  <span class=\"js-syntax\">{</span>\n    text_layer_set_text<span class=\"js-syntax\">(</span>bt_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"BT<span class=\"js-syntax\">:</span> DISCONNECTED\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The final step is to perform the actual subscription, which is very easy to do, and happens in <code>init()</code>:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Subscribe to BluetoothConnectionService</span>\nbluetooth_connection_service_subscribe<span class=\"js-syntax\">(</span>bt_handler<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "After compiling and installing the project, try disconnecting and re-connecting your phone's Bluetooth radio a few times and observe the result."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Battery State Service\nThe next Event Service we will be adding will be the Battery State Service, which provides information on the Pebble's battery. It provides more detail than a simple <code>bool</code>, including charging status and whether the cable is plugged in or not. As before, we will create a new <code>TextLayer</code> to show the output. Add the pointer to the last one in the declaration:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> TextLayer *bt_layer<span class=\"js-syntax\">,</span> *batt_layer<span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Then, perform the proper creation in <code>window_load()</code>. This time, the information provided by the Battery State Service comes in the form on the <code>BatteryChargeState</code> data structure, with fields <a title=\"BatteryChargeState\" href=\"https://developer.getpebble.com/2/api-reference/group___battery_state_service.html#struct_battery_charge_state\">as shown in the documentation</a>. It is worth noting that the Service only returns the battery charge in increments of 10. The setup of the new <code>TextLayer</code> is shown below:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Setup Battery Layer</span>\nbatt_layer<span class=\"js-keyword\"> = </span>text_layer_create<span class=\"js-syntax\">(</span>GRect<span class=\"js-syntax\">(</span>5<span class=\"js-syntax\">,</span> 25<span class=\"js-syntax\">,</span> 144<span class=\"js-syntax\">,</span> 30<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\ntext_layer_set_font<span class=\"js-syntax\">(</span>batt_layer<span class=\"js-syntax\">,</span> fonts_get_system_font<span class=\"js-syntax\">(</span>FONT_KEY_GOTHIC_18<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\nlayer_add_child<span class=\"js-syntax\">(</span>window_get_root_layer<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> text_layer_get_layer<span class=\"js-syntax\">(</span>batt_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">//Get info, copy to long-lived buffer and display</span>\nBatteryChargeState state<span class=\"js-keyword\"> = </span>battery_state_service_peek<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-keyword\">static</span> char buffer<span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span><span class=\"_string\">\"Battery<span class=\"js-syntax\">:</span> 100/100\"</span><span class=\"js-syntax\">;</span>\nsnprintf<span class=\"js-syntax\">(</span>buffer<span class=\"js-syntax\">,</span> sizeof<span class=\"js-syntax\">(</span><span class=\"_string\">\"Battery<span class=\"js-syntax\">:</span> 100/100\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"Battery<span class=\"js-syntax\">:</span> %d/100\"</span><span class=\"js-syntax\">,</span> state.charge_percent<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\ntext_layer_set_text<span class=\"js-syntax\">(</span>batt_layer<span class=\"js-syntax\">,</span> buffer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "After re-compiling, the battery charge percentage should be shown below the Bluetooth status."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Accelerometer Service (tap)\nThe Accelerometer Service operates in a very similar manner to the previous two Event Services, but can operate in two modes: tap and raw data. The tap mode will call a handler that we subscribe when the Pebble is tapped (or wrist is shaken), whereas the raw data mode will supply X, Y and Z values at an rate we select. I'll show both of these for the sake of completeness. An application of the latter mode <a title=\"Block Game using Pebble Accelerometer\" href=\"http://ninedof.wordpress.com/2014/04/24/block-game-using-pebble-accelerometer/\">can be seen here</a>."
    },
    {
      "type": "paragraph",
      "text": "First, we create a further <code>TextLayer</code> to show the output data:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> TextLayer *bt_layer<span class=\"js-syntax\">,</span> *batt_layer<span class=\"js-syntax\">,</span> *accel_layer<span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The first mode we will use is the tap mode. Let's create the <code>TextLayer</code> proper in <code>window_load()</code>:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Setup Accel Layer</span>\naccel_layer<span class=\"js-keyword\"> = </span>text_layer_create<span class=\"js-syntax\">(</span>GRect<span class=\"js-syntax\">(</span>5<span class=\"js-syntax\">,</span> 45<span class=\"js-syntax\">,</span> 144<span class=\"js-syntax\">,</span> 30<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\ntext_layer_set_font<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> fonts_get_system_font<span class=\"js-syntax\">(</span>FONT_KEY_GOTHIC_18<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\ntext_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> N/A\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\nlayer_add_child<span class=\"js-syntax\">(</span>window_get_root_layer<span class=\"js-syntax\">(</span>window<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> text_layer_get_layer<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Next, we will create the handler function to be called whenever a tap is detected, and furnish it with logic to show what kind of tap was detected:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>accel_tap_handler<span class=\"js-syntax\">(</span>AccelAxisType axis<span class=\"js-syntax\">,</span> int32_t direction<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  switch<span class=\"js-syntax\">(</span>axis<span class=\"js-syntax\">)</span>\n  <span class=\"js-syntax\">{</span>\n  case ACCEL_AXIS_X<span class=\"js-syntax\">:</span>\n    <span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>direction > 0<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> X <span class=\"js-syntax\">(</span>+<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> else</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> X <span class=\"js-syntax\">(</span>-<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n  case ACCEL_AXIS_Y<span class=\"js-syntax\">:</span>\n    <span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>direction > 0<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> Y <span class=\"js-syntax\">(</span>+<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> else</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> Y <span class=\"js-syntax\">(</span>-<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n  case ACCEL_AXIS_Z<span class=\"js-syntax\">:</span>\n    <span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>direction > 0<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> Z <span class=\"js-syntax\">(</span>+<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> else</span>\n    <span class=\"js-syntax\">{</span>\n      text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> <span class=\"_string\">\"Accel tap<span class=\"js-syntax\">:</span> Z <span class=\"js-syntax\">(</span>-<span class=\"js-syntax\">)</span>\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n   <span class=\"js-keyword\"> break</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Finally, we subscribe our handler function to the Accelerometer Event Service in <code>init()</code>:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Subscribe to AccelerometerService</span>\naccel_tap_service_subscribe<span class=\"js-syntax\">(</span>accel_tap_handler<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "You should now be able to see the result of tapping the watch. Personally I've found that shaking the wrist is a more reliable way of triggering events (such as showing more information on a watchface), but taps can still be used as an option."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Accelerometer Service (raw data)\nFinally, we will use the raw data mode of the Accelerometer Service. To do this, we will first remove the existing Accelerometer Service subscription (but still keep the handler for reference)."
    },
    {
      "type": "paragraph",
      "text": "In the raw data mode, the data values arrive at a specific interval chosen with a call to <code>accel_service_set_sampling_rate()</code>, and the number of samples in a batch can be chosen using <code>accel_service_set_samples_per_update()</code>. We will stick with the default rate and update size for simplicity. Be aware that this mode will drain the battery significantly faster than the tap mode."
    },
    {
      "type": "paragraph",
      "text": "Next, we will create a new handler function to let us access the data that arrives from the Event Service. Accessing the data is as simple as reading the fields in the <code>data</code> parameter in the handler, as shown below:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">static</span> <span class=\"js-blueword\">void </span>accel_raw_handler<span class=\"js-syntax\">(</span>AccelData *data<span class=\"js-syntax\">,</span> uint32_t num_samples<span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n  <span class=\"js-keyword\">static</span> char buffer<span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span><span class=\"_string\">\"XYZ<span class=\"js-syntax\">:</span> 9999 / 9999 / 9999\"</span><span class=\"js-syntax\">;</span>\n  snprintf<span class=\"js-syntax\">(</span>buffer<span class=\"js-syntax\">,</span> sizeof<span class=\"js-syntax\">(</span><span class=\"_string\">\"XYZ<span class=\"js-syntax\">:</span> 9999 / 9999 / 9999\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"XYZ<span class=\"js-syntax\">:</span> %d / %d / %d\"</span><span class=\"js-syntax\">,</span> data<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span>.x<span class=\"js-syntax\">,</span> data<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span>.y<span class=\"js-syntax\">,</span> data<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span>.z<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  text_layer_set_text<span class=\"js-syntax\">(</span>accel_layer<span class=\"js-syntax\">,</span> buffer<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Finally, we add the new subscription, making sure we have disabled the one one in <code>init()</code>:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Subscribe to AccelerometerService (uncomment one to choose)</span>\n<span class=\"comment\">//accel_tap_service_subscribe(accel_tap_handler);</span>\naccel_data_service_subscribe<span class=\"js-syntax\">(</span>1<span class=\"js-syntax\">,</span> accel_raw_handler<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Now this is all in place, re-compile and re-install the watch app to see the live values. Try tilting the watch in each axis to see the <a title=\"g\" href=\"http://en.wikipedia.org/wiki/Standard_gravity\">constant g acceleration</a> act on each in turn."
    },
    {
      "type": "paragraph",
      "text": "The final result should look like this:\n!<a class=\"link\" target=\"_blank\" href=\"/assets/import/media/2014/07/final.png\"></a>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion\nSo, that's the new Event Services. As I mentioned, there is another called the App Focus Service which tells you when your app is covered by a notification, but it works in a very similar way to the Bluetooth Connection Service, so you should be able to figure it out!"
    },
    {
      "type": "paragraph",
      "text": "The full source code can be <a title=\"Tutorial 10 source\" href=\"https://github.com/C-D-Lewis/pebble-sdk2-tut-10\">found here on GitHub</a>."
    }
  ]
}