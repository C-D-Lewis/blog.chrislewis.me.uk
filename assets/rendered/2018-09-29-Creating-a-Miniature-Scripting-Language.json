{
  "title": "Creating a Miniature Scripting Language",
  "fileName": "2018-09-29-Creating-a-Miniature-Scripting-Language.md",
  "dateTime": "2018-09-29 21:10:48",
  "tags": [
    "JavaScript"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "After using a number of proper programming languages for various projects over the last several years, one couple stood out as an interesting concepts - the DCPU-16 language from <a href=\"https://en.wikipedia.org/wiki/0x10c\">0x10c</a>, used to program an in-game computer. This was sadly never fully realised beyond community emulators after the project was abandoned, but the idea was to provide a simple language that players could learn to use to advantage themselves. For example, to tell a weapon how to track another ship, given its bearing and speed."
    },
    {
      "type": "paragraph",
      "text": "I'd like to see a game fully utilise such a concept one day, but until then, I'd thought I'd have a go at creating a <strong>very</strong> simple pseudo-language and see what would be involved."
    },
    {
      "type": "header",
      "level": 2,
      "text": "The Result"
    },
    {
      "type": "paragraph",
      "text": "Turns out the easiest way to go about it to is to use an existing language as a platform - a <a href=\"https://en.wikipedia.org/wiki/Source-to-source_compiler\">transpiler</a>. For example, languages like TypeScript and Dart that are transformed to JavaScript, a much more portable language (browsers, Node, <a href=\"https://pebble.github.io/rockyjs/\">watches</a>, etc.) that can easily be run in many places."
    },
    {
      "type": "paragraph",
      "text": "To this end I set out (in my typically enjoyed 'do it yourself' style) to try and make a simplified language that is converted into JavaScript, line for line. The result is a project unimaginatively dubbed '<a href=\"https://github.com/C-D-Lewis/islang\">islang</a>' (the 'is' language), so called after the simplest possible statement. The aim is to create a 'language' that is easily learned and uses as little symbols or special syntax rules as possible, which I have seen pose a barrier to new programmers who have never seriously used a programming language before, and would say something like 'why does that line only have a curly bracket in?'"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Is"
    },
    {
      "type": "paragraph",
      "text": "So without further ado, here is a sample program that implements a typical 'greeter' scenario:"
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\ntask greet gets name\n  log 'Hello there, {name}!'\nend\n\ntask main\n  value name is 'Chris'\n  run greet with name\nend\n\nrun main\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Hopefully you'll notice that there aren't many special characters. Even the indentation isn't really necessary, but as always aids readability. The structure is based on classic variables, sub-routines (here called 'tasks'), and the concepts of assignment and calling those tasks."
    },
    {
      "type": "paragraph",
      "text": "Let's break it down:"
    },
    {
      "type": "paragraph",
      "text": " • Two tasks are defined, one of which takes a single argument called 'name'."
    },
    {
      "type": "paragraph",
      "text": " • This first task uses 'log' and a simplified version of JavaScript's template strings to log the name as part of a whole sentence."
    },
    {
      "type": "paragraph",
      "text": " • The second task is the 'main' task."
    },
    {
      "type": "paragraph",
      "text": " • The 'main' task defines a variable (called a 'value') which <em>is</em> 'Chris', a string value."
    },
    {
      "type": "paragraph",
      "text": " • The earlier task 'greet' is then called with the 'run' statement, and the variable is passed to it using 'with' to indicate that the two happen together."
    },
    {
      "type": "paragraph",
      "text": " • Finally, 'main' is called from the bottom of the script."
    },
    {
      "type": "paragraph",
      "text": "The output is thus:"
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nHello there, Chris!\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Compilation"
    },
    {
      "type": "paragraph",
      "text": "Take a look at the project on <a href=\"https://github.com/C-D-Lewis/islang\">GitHub</a>, specifically '<a href=\"https://github.com/C-D-Lewis/islang/blob/master/src/transform.js\">transform.js</a>', which uses a sequence of conventional rules to mould the input line (and its 'tokens', the individual words in the line) into the output line of JavaScript. This function is includes by 'index.js' and processes every line in the source '.is' file into one output JavaScript files called 'build.js'. The programmer can then run their program using node as usual."
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nnpm run compile ./my_program.is\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nnode build.js\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "In this manner, more rules can be added, though it is limited right now to one rule per line, and only a few cases where combinations occur (such as returning a function call). This could be made more sophisticated in the future, but I confess as an Electronic Engineering graduate I have never studied how real compilers work!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "A More Complex Example"
    },
    {
      "type": "paragraph",
      "text": "Here's a slightly more complex example that calculates the result of a series of Fibonacci calculations:"
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\ntask fibonacci gets input\n  when input <= 1\n    return input\n  end\n\n  // return fib(n-1) + fib(n-2);\n  value n_minus_1 is input - 1\n  value n_minus_2 is input - 2\n  value result_1 is run fibonacci with n_minus_1\n  value result_2 is run fibonacci with n_minus_2\n  return result_1 + result_2\nend\n\ntask main\n  value fib_output is run fibonacci with 9\n  log 'fib_output: {fib_output}'\nend\n\nrun main\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The pattern is similar, with tasks set up and called from a 'main' task. Another task performs the 'f(n-1) + f(n-2)' calculation and results the result, using some other features of the language."
    },
    {
      "type": "paragraph",
      "text": "Here's the resulting JavaScript:"
    },
    {
      "type": "paragraph",
      "text": "<!-- language=\"js\" -->\n<pre><div class=\"code-block\">\n<span class=\"comment\">// compiled from islang source</span>\n\n<span class=\"js-blueword\">function</span> fibonacci <span class=\"js-syntax\">(</span>input<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span>input <= 1<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    <span class=\"js-keyword\">return </span>input<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n\n<span class=\"comment\">  // return fib(n-1) + fib(n-2);</span>\n  <span class=\"js-blueword\">let</span> n_minus_1<span class=\"js-keyword\"> = </span>input - 1<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> n_minus_2<span class=\"js-keyword\"> = </span>input - 2<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> result_1<span class=\"js-keyword\"> = </span>fibonacci<span class=\"js-syntax\">(</span>n_minus_1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">let</span> result_2<span class=\"js-keyword\"> = </span>fibonacci<span class=\"js-syntax\">(</span>n_minus_2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-keyword\">return </span>result_1 + result_2<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">function</span> main <span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">let</span> fib_output<span class=\"js-keyword\"> = </span>fibonacci<span class=\"js-syntax\">(</span>9<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span><span class=\"_string\">`fib_output: $<span class=\"js-syntax\">{</span>fib_output<span class=\"js-syntax\">}</span>`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\nmain<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nfib_output: 34\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Looks familiar, right?"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Language Features"
    },
    {
      "type": "paragraph",
      "text": "Right now those are:"
    },
    {
      "type": "paragraph",
      "text": " • Variables - declaration and assignment using literal numbers and strings, expressions (simple arithmetic etc.) and as function results."
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nvalue my_value is 10\n\nmy_value is 20\n\nmy_value is run increment my_value\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": " • Functions - tasks can take zero or more arguments, and return values."
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\ntask increment gets input_value\n  return input_value + 1\nend\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": " • Control - 'when' and 'until' allow use of 'if' and 'while' loop control statements using ordinary simple JavaScript operators."
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nwhen temperature  15\n  log 'Might be cold out there'\n  temperature is temperature + 1\nend\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": " • Objects - 'object' and 'property' keywords allow contruction of simple objects."
    },
    {
      "type": "paragraph",
      "text": "<pre><div class=\"code-block\">\nobject car\ncar property color is 'red'\ncar property num_wheels is 4\n\nlog 'This {car.color} car has only {car.num_wheels} wheels!'\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Wrapping Up"
    },
    {
      "type": "paragraph",
      "text": "This turned out to be longer than I thought it would be, but the general point is - this is a lot of run, and I hope to add more features in the future, maybe to even use it to teach or provide some more depth or extensibility to another project..."
    },
    {
      "type": "paragraph",
      "text": "If you're interested, check out some of the <a href=\"https://github.com/C-D-Lewis/islang/tree/master/examples\">example programs</a>, and give the compilation a try!"
    }
  ]
}