{
  "title": "Making MIDI Music With Raspberry Pi Pico",
  "fileName": "2021-06-05-Making-MIDI-Music-With-Raspberry-Pi-Pico.md",
  "dateTime": "2021-06-05 12:17",
  "tags": [
    "Integration",
    "Raspberry Pi",
    "C++",
    "Python"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "Since some of the earlier years of YouTube, one of the coolest types of project\nI've seen is making music using unusual instruments. Typically these could be\nfloppy disk drives or hard disk drives, which have one common ingredient - high\nprecision stepper motors. These kinds of motors 'step' one eighth or sixteenth\nof an increment whenever a single pulse signal is issued to a driver board\n(required since the motors have many wires for multiple sets of windings)."
    },
    {
      "type": "paragraph",
      "text": "As it happens, the frequency of these steps results in different overall speeds,\nbut also different musical tones. After all, what are different musical notes\nexcept different frequencies? For example, a middle C is 262 Hz. More recently,\nI saw a few more modern projects that use only these motors and driver boards\nto produce music."
    },
    {
      "type": "paragraph",
      "text": "The common MIDI file format is just a set of notes, with\npitch, instrument type, and duration of notes. The job of machines and musical\ninstruments that play these files is to emulate those notes without a real\nphysical instrument. Using stepper motors to do this translation of musical\npitch to step frequency is just another example of such musical synthesis."
    },
    {
      "type": "paragraph",
      "text": "This post will go into detail about compiling MIDI files to C++ headers and how\nthe Pico controls the motors to sound musical notes, but keep reading for a\nvideo medley compilation of some great example songs in action!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Construction"
    },
    {
      "type": "paragraph",
      "text": "So, inspired, I decided to have a go myself! The result is the strange gadget\nshown below, notionally named\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/c-d-lewis/pico-pipes\">pico-pipes</a>, alluding to a musical\ninstrument that is powered by the new Raspberry Pi Pico - a slimmed down\nmicrocontroller-esque incarnation of the popular mini-computer that is closer\nto a single-program Arduino than a fully capable Linux PC system."
    },
    {
      "type": "paragraph",
      "text": "In its role as a microcontroller it has a large number of digital and analog\ninput and output pins, which are perfect for issuing high-precision pulses\nto the A4988 stepper motor driver boards (designed for 3D Printer drivers, but\nsuitable enough). It can be programmed in C, or micropython using the official\n<a class=\"link\" target=\"_blank\" href=\"https://www.raspberrypi.org/documentation/rp2040/getting-started/\">Raspberry Pi Pico SDKs</a>."
    },
    {
      "type": "paragraph",
      "text": "Combined with a sticky-back breadboard, a 9V socket and wall adapter, and\nminimalistic (to put it kindly) case 3D printed by my brother, it forms a\nself-contained, relatively rattle-free unit."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/06/pico-pipes.jpg"
    },
    {
      "type": "paragraph",
      "text": "Here are a couple more photos showing the Raspberry Pi:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/06/pico-pipes-pi.jpg"
    },
    {
      "type": "paragraph",
      "text": "And stepper motor driver boards in situ, as well as the semi-organised set of\nwires connecting the Pi to the driver boards, and the boards to the motors\nthemselves:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/06/pico-pipes-drivers.jpg"
    },
    {
      "type": "paragraph",
      "text": "The intent of the case is to provide a single physical contact point for all the\nmotors to resonate together, instead of just rattling over a desk-top. They are\nheld in place with 3mm machine screws, although a couple of the holes didn't\nprint perfectly, but all are attached with a minimum of three out of four. The\ncorner posts connect the top and bottom halves of the case, but since I made the\nmistake of drilling the semi-printed holes too wide, are super-glued instead."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Compiling MIDI Files to C++"
    },
    {
      "type": "paragraph",
      "text": "So, how does the Raspberry Pi Pico know which notes to play? The first step is\nto open a MIDI file and get a list of all instruments, and which notes they\nplay. This is done using the handy\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/craffel/pretty-midi\">pretty_midi</a> library."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-python\">Python</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\"># Load midi file</span>\nmidi_data<span class=\"js-keyword\"> = </span>pretty_midi.PrettyMIDI<span class=\"js-syntax\">(</span>file_name<span class=\"js-syntax\">)</span>\n\n<span class=\"comment\"># Read instruments - skip the drums</span>\nnon_drum_instruments<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span>\n<span class=\"js-keyword\">for </span>i<span class=\"js-syntax\">,</span> instrument<span class=\"js-keyword\"> in </span>enumerate<span class=\"js-syntax\">(</span>midi_data.instruments<span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span>\n  <span class=\"js-keyword\">if </span><span class=\"js-keyword\">not </span>instrument.is_drum<span class=\"js-syntax\">:</span>\n    program_name<span class=\"js-keyword\"> = </span>PROGRAM_MAP<span class=\"js-syntax\">[</span>instrument.program<span class=\"js-syntax\">]</span> <span class=\"js-keyword\">if </span>instrument.program > 0<span class=\"js-keyword\"> else</span> <span class=\"_string\">'Unknown'</span>\n    num_notes<span class=\"js-keyword\"> = </span>len<span class=\"js-syntax\">(</span>instrument.notes<span class=\"js-syntax\">)</span>\n    selected<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'pm_instrument'</span><span class=\"js-syntax\">:</span> instrument<span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'program_name'</span><span class=\"js-syntax\">:</span> program_name<span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'num_notes'</span><span class=\"js-syntax\">:</span> num_notes<span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'summary'</span><span class=\"js-syntax\">:</span> f<span class=\"_string\">\"Track <span class=\"js-syntax\">{</span>i<span class=\"js-syntax\">}</span> <span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>program_name<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>num_notes<span class=\"js-syntax\">}</span> notes\"</span>\n    <span class=\"js-syntax\">}</span>\n\n    non_drum_instruments.append<span class=\"js-syntax\">(</span>selected<span class=\"js-syntax\">)</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The <code>PROGRAM_MAP</code> variable is a long map of instrument codes to names\nof those instruments."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-python\">Python</div>\n<pre><div class=\"code-block\">\nPROGRAM_MAP<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n  1<span class=\"js-syntax\">:</span> <span class=\"_string\">'Acoustic Grand Piano'</span><span class=\"js-syntax\">,</span>\n  2<span class=\"js-syntax\">:</span> <span class=\"_string\">'Bright Acoustic Piano'</span><span class=\"js-syntax\">,</span>\n  3<span class=\"js-syntax\">:</span> <span class=\"_string\">'Electric Grand Piano'</span><span class=\"js-syntax\">,</span>\n  4<span class=\"js-syntax\">:</span> <span class=\"_string\">'Honky-tonk Piano'</span><span class=\"js-syntax\">,</span>\n  5<span class=\"js-syntax\">:</span> <span class=\"_string\">'Electric Piano 1'</span><span class=\"js-syntax\">,</span>\n  6<span class=\"js-syntax\">:</span> <span class=\"_string\">'Electric Piano 2'</span><span class=\"js-syntax\">,</span>\n  7<span class=\"js-syntax\">:</span> <span class=\"_string\">'Harpsichord'</span><span class=\"js-syntax\">,</span>\n  8<span class=\"js-syntax\">:</span> <span class=\"_string\">'Clavinet'</span><span class=\"js-syntax\">,</span>\n\n<span class=\"comment\">  # And so on...</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This allows the <code>compile.py</code> program to give\na list of track numbers and instrument names, as well as how many notes each\nwill play. This is useful because we can only have as many instruments as motors\nwhich in this case is 4, but could be more in the future. An example is shown\nbelow:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-text\">Text</div>\n<pre><div class=\"code-block\">\n$ python3 compile.py ~/Downloads/starlight.mid\n\nfile_name: /Users/chrislewis/Downloads/starlight.mid\n\n0: Track 0 (Acoustic Bass): 880 notes\n1: Track 1 (Overdriven Guitar): 880 notes\n2: Track 3 (FX 6 (goblins)): 320 notes\n3: Track 4 (Lead 8 (bass + lead)): 312 notes\n4: Track 5 (Electric Guitar (muted)): 808 notes\n5: Track 6 (Electric Guitar (jazz)): 128 notes\n6: Track 7 (Electric Guitar (muted)): 1 notes\n7: Track 8 (Bright Acoustic Piano): 320 notes\n8: Track 9 (Pad 1 (new age)): 640 notes\n9: Track 10 (Voice Oohs): 512 notes\n10: Track 11 (Voice Oohs): 312 notes\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Re-running the script with four track numbers as the last parameter will cause\nit to generate a C++ header file, with an array of notes with track number,\npitch, and duration."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-c\">C</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">// GENERATED WITH compile.py</span>\n\n#<span class=\"js-keyword\">define</span> <span class=\"js-blueword\">NUM_NOTES</span> 5155\n\n<span class=\"comment\">// Order is track, pitch, on_at, off_at</span>\n<span class=\"js-keyword\">static</span> <span class=\"js-keyword\">const</span> <span class=\"js-blueword\">float</span>* NOTE_TABLE<span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 60<span class=\"js-syntax\">,</span> 0.0<span class=\"js-syntax\">,</span> 1.86046 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 63<span class=\"js-syntax\">,</span> 0.11628<span class=\"js-syntax\">,</span> 1.74418 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 67<span class=\"js-syntax\">,</span> 0.23256<span class=\"js-syntax\">,</span> 1.62791 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 72<span class=\"js-syntax\">,</span> 0.34884<span class=\"js-syntax\">,</span> 1.51163 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 75<span class=\"js-syntax\">,</span> 0.46512<span class=\"js-syntax\">,</span> 1.39535 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 79<span class=\"js-syntax\">,</span> 0.58139<span class=\"js-syntax\">,</span> 0.81395 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 84<span class=\"js-syntax\">,</span> 0.69767<span class=\"js-syntax\">,</span> 0.93023 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 87<span class=\"js-syntax\">,</span> 0.81395<span class=\"js-syntax\">,</span> 1.04651 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 91<span class=\"js-syntax\">,</span> 0.93023<span class=\"js-syntax\">,</span> 1.16279 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 87<span class=\"js-syntax\">,</span> 1.04651<span class=\"js-syntax\">,</span> 1.27907 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">(</span><span class=\"js-blueword\">float</span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">{</span> 0<span class=\"js-syntax\">,</span> 84<span class=\"js-syntax\">,</span> 1.16279<span class=\"js-syntax\">,</span> 2.55814 <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n\n<span class=\"comment\">  // and so on...</span>\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Timing steppers from notes"
    },
    {
      "type": "paragraph",
      "text": "This combatted a problem I had earlier on with a version that used micropython\ninstead of C++ (for ease of use), but sadly there was a limit of the size of\nMIDI file that could be read from the onboard memory, and micropython was\nincapable of providing enough real-time precision for the step pulses, which\nare microseconds-scale in size. Happily the equivalent in C++ compiled to\nmachine code easily precisely controls four motors, and probably a fair few more\ngiven the 133MHz Cortex M0+ onboard the Pico."
    },
    {
      "type": "paragraph",
      "text": "The basic model of the program is as follows:"
    },
    {
      "type": "paragraph",
      "text": "Each motor is a <code>struct</code> that keeps the state of that motor. When\ncreated, it also initializes the GPIO pin assigned to it, through which it sends\nstep pulses to the motor driver board. It tracks which GPIO pin to use, whether\nthe motor is in use, when it last took a step since program start, the delay in\nmicroseconds between steps (calculated from the frequency table corresponding\nto the currently playing note), when the note started, and the millisecond\nduration of the note."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-c\">C</div>\n<pre><div class=\"code-block\">\n<span class=\"js-blueword\">struct </span>Motor <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">int </span>pin<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">int </span>is_on<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">uint64_t</span> last_step_us<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">uint64_t</span> step_delay_us<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">uint64_t</span> note_start_us<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">uint64_t</span> note_duration_ms<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Setup a Motor data structure.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">struct </span>Motor motor_create<span class=\"js-syntax\">(</span><span class=\"js-blueword\">int </span>pin<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">struct </span>Motor m<span class=\"js-syntax\">;</span>\n  m.pin<span class=\"js-keyword\"> = </span>pin<span class=\"js-syntax\">;</span>\n  m.is_on<span class=\"js-keyword\"> = </span>FALSE<span class=\"js-syntax\">;</span>\n  m.last_step_us<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span>\n  m.step_delay_us<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span>\n  m.note_start_us<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span>\n  m.note_duration_ms<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // GPIO init</span>\n  gpio_init<span class=\"js-syntax\">(</span>pin<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  gpio_set_dir<span class=\"js-syntax\">(</span>pin<span class=\"js-syntax\">,</span> GPIO_OUT<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">return </span>m<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "When the program advances through the compiled note list from\n<code>compile.py</code>, the motor corresponding to the track number in the MIDI\nfile is updated with the new note, which contains pitch, on time, and duration.\nA separate <code>struct</code> is used with the item in the note list header\nfile."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-c\">C</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Update a motor with a new note event.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">void </span>motor_set_note<span class=\"js-syntax\">(</span><span class=\"js-blueword\">struct </span>Motor *m<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">struct </span>Note n<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  m<span class=\"js-keyword\">-></span>is_on<span class=\"js-keyword\"> = </span>TRUE<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Duration control</span>\n  m<span class=\"js-keyword\">-></span>note_start_us<span class=\"js-keyword\"> = </span>to_us_since_boot<span class=\"js-syntax\">(</span>get_absolute_time<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  m<span class=\"js-keyword\">-></span>note_duration_ms<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">(</span>n.off_at - n.on_at<span class=\"js-syntax\">)</span> * 1000<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Set delay from pitch frequency</span>\n  m<span class=\"js-keyword\">-></span>step_delay_us<span class=\"js-keyword\"> = </span>1000000 / pitch_get_freq<span class=\"js-syntax\">(</span>n.pitch<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Lastly, as long as there are notes left to play, the main program loop 'ticks'\neach motor, allowing it to step if enough time has passed from the last step, at\nthe correct rate for the desired note frequency:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-c\">C</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Tick a motor.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">void </span>motor_tick<span class=\"js-syntax\">(</span><span class=\"js-blueword\">struct </span>Motor *m<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">uint64_t</span> now_us<span class=\"js-keyword\"> = </span>to_us_since_boot<span class=\"js-syntax\">(</span>get_absolute_time<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Turn off?</span>\n  <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>now_us - m<span class=\"js-keyword\">-></span>note_start_us > <span class=\"js-syntax\">(</span>m<span class=\"js-keyword\">-></span>note_duration_ms * 1000<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    m<span class=\"js-keyword\">-></span>is_on<span class=\"js-keyword\"> = </span>FALSE<span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n\n<span class=\"comment\">  // Take a step if step delay elapsed</span>\n  <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>now_us - m<span class=\"js-keyword\">-></span>last_step_us > m<span class=\"js-keyword\">-></span>step_delay_us<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    m<span class=\"js-keyword\">-></span>last_step_us<span class=\"js-keyword\"> = </span>now_us<span class=\"js-syntax\">;</span>\n\n    <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>m<span class=\"js-keyword\">-></span>is_on <span class=\"js-keyword\">== </span>TRUE<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      gpio_put<span class=\"js-syntax\">(</span>m<span class=\"js-keyword\">-></span>pin<span class=\"js-syntax\">,</span> 1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      sleep_us<span class=\"js-syntax\">(</span>5<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      gpio_put<span class=\"js-syntax\">(</span>m<span class=\"js-keyword\">-></span>pin<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Thus, the main loop is actually quite succinct, thanks to the choice to use\nloops and <code>struct</code>s:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-c\">C</div>\n<pre><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Entry point.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">int </span>main<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n<span class=\"comment\">  // Create motors</span>\n  <span class=\"js-blueword\">struct </span>Motor motor1<span class=\"js-keyword\"> = </span>motor_create<span class=\"js-syntax\">(</span>MOTOR_1_PIN<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">struct </span>Motor motor2<span class=\"js-keyword\"> = </span>motor_create<span class=\"js-syntax\">(</span>MOTOR_2_PIN<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">struct </span>Motor motor3<span class=\"js-keyword\"> = </span>motor_create<span class=\"js-syntax\">(</span>MOTOR_3_PIN<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">struct </span>Motor motor4<span class=\"js-keyword\"> = </span>motor_create<span class=\"js-syntax\">(</span>MOTOR_4_PIN<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">  // Pre-load first note</span>\n  <span class=\"js-blueword\">int </span>note_index<span class=\"js-keyword\"> = </span>0<span class=\"js-syntax\">;</span>\n  <span class=\"js-blueword\">struct </span>Note next_note<span class=\"js-keyword\"> = </span>note_create<span class=\"js-syntax\">(</span>NOTE_TABLE<span class=\"js-syntax\">[</span>note_index<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n  <span class=\"js-keyword\">while </span><span class=\"js-syntax\">(</span>true<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    motor_tick<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    motor_tick<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    motor_tick<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor3<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    motor_tick<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor4<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // End?</span>\n    <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>note_index <span class=\"js-keyword\">== </span><span class=\"js-blueword\">NUM_NOTES</span> - 1<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">return </span>0<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    // Update next event</span>\n    <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>get_ms_now<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> > next_note.on_at * 1000<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n<span class=\"comment\">      // One motor per track</span>\n      <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>next_note.track <span class=\"js-keyword\">== </span>0<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        motor_set_note<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor1<span class=\"js-syntax\">,</span> next_note<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> else</span> <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>next_note.track <span class=\"js-keyword\">== </span>1<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        motor_set_note<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor2<span class=\"js-syntax\">,</span> next_note<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> else</span> <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>next_note.track <span class=\"js-keyword\">== </span>2<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        motor_set_note<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor3<span class=\"js-syntax\">,</span> next_note<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> else</span> <span class=\"js-keyword\">if</span> <span class=\"js-syntax\">(</span>next_note.track <span class=\"js-keyword\">== </span>3<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        motor_set_note<span class=\"js-syntax\">(</span><span class=\"js-keyword\">&</span>motor4<span class=\"js-syntax\">,</span> next_note<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n      <span class=\"js-syntax\">}</span>\n\n      note_index <span class=\"js-keyword\">+= </span>1<span class=\"js-syntax\">;</span>\n      next_note<span class=\"js-keyword\"> = </span>note_create<span class=\"js-syntax\">(</span>NOTE_TABLE<span class=\"js-syntax\">[</span>note_index<span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Medley video"
    },
    {
      "type": "paragraph",
      "text": "Below is a video selection showcasing some great example songs from games such\nas The Legend of Zelda: The Wind Waker, Super Mario Sunshine, UNDERTALE, Final\nFantasy VII, Pokemon Yellow, and Portal. Enjoy!"
    },
    {
      "type": "paragraph",
      "text": "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/VKjqNz4cVn8\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "In this manner, virtually any MIDI file can be analysed for instruments and\nnotes, compiled into a note list as a C++ header file, and played on a variable\nnumber of motors on a Raspberry Pi Pico or similar C-based microcontroller. I've\nalready had a lot of fun trying many different pieces of music, but obviously\nvideo game music (which makes heavy use of catchy, repeating melodies) sounds\nthe best."
    },
    {
      "type": "paragraph",
      "text": "Check out the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/pico-pipes\">project repository</a> for all the\ncode and documentation in case you want to run it yourself!"
    }
  ]
}