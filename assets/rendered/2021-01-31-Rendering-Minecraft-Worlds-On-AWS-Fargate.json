{
  "fileName": "2021-01-31-Rendering-Minecraft-Worlds-On-AWS-Fargate.md",
  "title": "Rendering Minecraft Worlds on AWS Fargate",
  "dateTime": "2021-01-31 13:31",
  "tags": [
    "JavaScript",
    "Integration",
    "Java",
    "AWS",
    "Terraform"
  ],
  "components": [
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/chunky-fargate-sample.png"
    },
    {
      "type": "paragraph",
      "text": "This personal project is one of those rare beasts - one that has long-lasting\nusefulness beyond the initial building of it. It doesn't have to be the case to\nbe a worthwhile project, but it helps!"
    },
    {
      "type": "paragraph",
      "text": "For a long time I've been keeping an eye on a niche open source project in the\nMinecraft community called <a class=\"link\" target=\"_blank\" href=\"https://chunky.llbit.se/\">Chunky</a>. It's a Java-based\napp that loads chunks from a Minecraft world, allows you to set up a scene with\naspects such as lighting, camera, material properties, etc., and finally to\nperform ray-traced rendering of that scene. The results offer a very pretty\nview of a world that myself or a group of friends have worked hard on and gives\nan opportunity to showcase it. Here's an example of a recent world rendered from\na Christmas community server:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/chunky-fargate-village.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Chunky"
    },
    {
      "type": "paragraph",
      "text": "After arranging a scene in Chunky, the output is a JSON file containing all the\nparameters that set up the shot including all the factors mentioned above. You\ncan run the <code>ChunkyLauncher.jar</code> file with many parameters to perform\nthe same rendering from a terminal as in the Chunky GUI. The number of samples\nper pixel (iterations) and the name of the scene are the main parameters:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-shell\">Shell</div>\n<pre class=\"\"><div class=\"code-block\">\njava \\\n  --module-path <span class=\"_string\">\"/usr/share/maven-repo/org/openjfx/javafx-controls/11/:/usr/share/maven-repo/org/openjfx/javafx-base/11/:/usr/share/maven-repo/org/openjfx/javafx-graphics/11/:/usr/share/maven-repo/org/openjfx/javafx-fxml/11/\"</span> \\\n  --add-modules=javafx.controls,javafx.base,javafx.graphics,javafx.fxml \\\n  -Dchunky.home=<span class=\"_string\">\"$(pwd)\"</span> \\\n  -jar ChunkyLauncher.jar \\\n  -f \\\n  -target $TARGET_SPP \\\n  -render $SCENE_NAME\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "This is the first step towards automation on AWS Fargate, where containerized\nDocker apps can be run on demand and cost only while they are running."
    },
    {
      "type": "paragraph",
      "text": "Onwards to Docker!"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Dockerization"
    },
    {
      "type": "paragraph",
      "text": "Since Chunky can be run from a Linux terminal, it is fairly trivial to run in\nDocker - it's just a case of choosing a suitable base image, adding the required\ndependencies and then using scripts to break up the process into manageable\nchunks. The <code>Dockerfile</code> for the finished project is shown below and\nincludes all these steps:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-dockerfile\">Dockerfile</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"dockerfile-keyword\">FROM</span> ubuntu:18.04\n\n<span class=\"dockerfile-keyword\">WORKDIR</span> /chunky\n\n<span class=\"comment\"># Environment variables</span>\n<span class=\"dockerfile-keyword\">ENV</span> MC_VERSION=<span class=\"_string\">\"1.16.4\"</span>\n\n<span class=\"comment\"># For tzdata dependency</span>\n<span class=\"dockerfile-keyword\">ARG</span> DEBIAN_FRONTEND=noninteractive\n<span class=\"dockerfile-keyword\">ENV</span> TZ=Europe/London\n\n<span class=\"comment\"># Dependencies</span>\n<span class=\"dockerfile-keyword\">RUN</span> apt-get update && apt-get install -y --no-install-recommends \\\n  default-jdk libopenjfx-java libcontrolsfx-java jq wget unzip awscli \\\n  && rm -rf /var/lib/apt/lists/*\n\n<span class=\"comment\"># Chunky files</span>\n<span class=\"dockerfile-keyword\">COPY</span> ChunkyLauncher.jar /chunky/ChunkyLauncher.jar\n\n<span class=\"comment\"># Initialize Chunky and Minecraft textures</span>\n<span class=\"dockerfile-keyword\">RUN</span> cd /chunky\n<span class=\"dockerfile-keyword\">RUN</span> java -Dchunky.home=<span class=\"_string\">\"$(pwd)\"</span> -jar ChunkyLauncher.jar --update\n<span class=\"dockerfile-keyword\">RUN</span> java -Dchunky.home=<span class=\"_string\">\"$(pwd)\"</span> -jar ChunkyLauncher.jar -download-mc $MC_VERSION\n\n<span class=\"comment\"># Pipeline</span>\n<span class=\"dockerfile-keyword\">COPY</span> pipeline /chunky/pipeline\n\n<span class=\"dockerfile-keyword\">ENTRYPOINT</span> [<span class=\"_string\">\"./pipeline/pipeline.sh\"</span>]\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "With a suitable Docker image prepared, it can be pushed to AWS Elastic Container\nRegistry to be used in a Fargate task definition."
    },
    {
      "type": "header",
      "level": 2,
      "text": "S3 as a store"
    },
    {
      "type": "paragraph",
      "text": "Since Fargate tasks run in AWS, it's not suitable for them to attempt to use\nany local files on my development machine. Yet Chunky requires world files and\nscene files in order to produce a render. To manage this, the project contains\nseveral shell scripts that use the <code>aws s3</code> command from\n<code>awscli</code> to fetch previously uploaded scene and world files from\nAmazon S3."
    },
    {
      "type": "paragraph",
      "text": "To try and ensure the setup is as easy to do as possible, the user is required\nto nominate a pre-existing S3 bucket, and a fixed subdirectory is used to\nprescribe input and output file locations. It is shown in summary with some\nexample files below:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-none\">Text</div>\n<pre class=\"\"><div class=\"code-block\">\ns3://$BUCKET/\n  - chunky-fargate/\n    - worlds/\n      - village-world.zip\n    - scenes/\n      - village-church-interior.json\n    - renders/\n      - $DATE/\n        - snapshot.png\n        - ...\n    - tasks/\n        village-all-scenes.json\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "As can probably be inferred, <code>worlds</code> contains Minecraft world\ndirectories in a zip file, <code>scenes</code> contains scenes from Chunky GUI,\nand <code>renders</code> contains the output PNG files in a directory per date."
    },
    {
      "type": "paragraph",
      "text": "The last directory called <code>tasks</code> contains JSON files that detail\none or more scenes in relation to a world name. More on that later."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Automatic rendering on world files upload"
    },
    {
      "type": "paragraph",
      "text": "As it stands, it's easy to run Chunky locally, or start a single remote Fargate\ntask to render a chosen scene on demand. But, the key reason to put all this\ninfrastructure in place is this - be able to nominate a set of scene files to be\nrendered automatically whenever a new version of an ongoing world is uploaded\nby the Minecraft server admin. This makes it trivial to have consistent scenes\nrendered showing progress of a set of builds over time, all offloaded to the\nAWS cloud."
    },
    {
      "type": "paragraph",
      "text": "The process is shown in the diagram below:"
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/chunky-fargate-architecture.png"
    },
    {
      "type": "paragraph",
      "text": "The key piece of this puzzle is a feature of S3 called bucket notifications.\nThis allows a Lambda function to run when certain events (such as a new file\nuploaded) occur in a particular bucket. In this case, a new zip file containing\nan updated copy of the Minecraft world to be rendered. In Terraform, this is\neasy to achieve:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-terraform\">Terraform</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"tf-keyword\">resource</span> <span class=\"_string\">\"aws_s3_bucket_notification\"</span> <span class=\"_string\">\"bucket_notification\"</span> <span class=\"js-syntax\">{</span>\n  count = <span class=\"tf-keyword\">var</span>.upload_trigger_enabled ? 1 <span class=\"js-syntax\">: </span>0\n\n  bucket = data.aws_s3_bucket.selected.id\n\n  lambda_function <span class=\"js-syntax\">{</span>\n    lambda_function_arn = aws_lambda_function.upload_function<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span>.arn\n    events              = <span class=\"js-syntax\">[</span><span class=\"_string\">\"s3:ObjectCreated:*\"</span><span class=\"js-syntax\">]</span>\n    filter_prefix       = <span class=\"_string\">\"chunky-fargate/worlds/\"</span>\n    filter_suffix       = <span class=\"_string\">\".zip\"</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "You can see the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/chunky-fargate/blob/main/lambda/upload-function.js\">full function code</a>\nfor all the details, but the most important parts are reading the file uploaded:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">/**</span>\n<span class=\"comment\"> * Main Lambda event handler.</span>\n<span class=\"comment\"> *</span>\n<span class=\"comment\"> * @param {object} event - S3 notification event.</span>\n<span class=\"comment\"> */</span>\n<span class=\"js-blueword\">exports</span>.handler<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">async </span><span class=\"js-syntax\">(</span>event<span class=\"js-syntax\">)</span><span class=\"js-keyword\"> => </span><span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span>\n    object<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> key <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    bucket<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">: </span>Bucket <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>event.Records<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span>.s3<span class=\"js-syntax\">;</span>\n\n  /*<span class=\"js-syntax\"> .</span>.. */\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Checking for task files that include the same world name:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">// Read all tasks</span>\n<span class=\"js-blueword\">const </span>listObjectsParms<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span> Bucket<span class=\"js-syntax\">,</span> Prefix<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>chunky-fargate/tasks/<span class=\"js-syntax\">'</span></span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span> Contents <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>s3.listObjects<span class=\"js-syntax\">(</span>listObjectsParms<span class=\"js-syntax\">)</span>.promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">// Select the relevant one to render</span>\n<span class=\"js-blueword\">const </span><span class=\"js-syntax\">[</span>taskFile<span class=\"js-syntax\">]</span><span class=\"js-keyword\"> = </span>Contents.filter<span class=\"js-syntax\">(</span>p<span class=\"js-keyword\"> => </span>p.Key.includes<span class=\"js-syntax\">(</span><span class=\"_string\"><span class=\"js-syntax\">'</span>json<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">)</span> <span class=\"js-keyword\">&&</span> p.Key.includes<span class=\"js-syntax\">(</span>newFileName<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-keyword\">if </span><span class=\"js-syntax\">(</span><span class=\"js-keyword\">!</span>taskFile<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  <span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span><span class=\"_string\">`No task found that includes $<span class=\"js-syntax\">{</span>newFileName<span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span> not triggering`</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  return<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n/*<span class=\"js-syntax\"> .</span>.. */\n\n<span class=\"js-blueword\">const </span>getObjectParams<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span> Bucket<span class=\"js-syntax\">,</span> Key<span class=\"js-syntax\">: </span>taskFile.Key <span class=\"js-syntax\">}</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const </span>getObjectRes<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>s3.getObject<span class=\"js-syntax\">(</span>getObjectParams<span class=\"js-syntax\">)</span>.promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span> world<span class=\"js-syntax\">,</span> scenes <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>JSON.parse<span class=\"js-syntax\">(</span>getObjectRes.Body.toString<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "And starting a new Fargate task with overriden environment variables controlling\nthe scene and world used, as well as the target SPP:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-js\">JavaScript</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-blueword\">const </span>res<span class=\"js-keyword\"> = </span><span class=\"js-keyword\">await </span>ecs.runTask<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span>\n  cluster<span class=\"js-syntax\">: </span>CLUSTER_NAME<span class=\"js-syntax\">,</span>\n  taskDefinition<span class=\"js-syntax\">: </span>FAMILY<span class=\"js-syntax\">,</span>\n  count<span class=\"js-syntax\">: </span>1<span class=\"js-syntax\">,</span>\n  launchType<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>FARGATE<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n  networkConfiguration<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n    awsvpcConfiguration<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n      subnets<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>SubnetId<span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n      securityGroups<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>GroupId<span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n      assignPublicIp:<span class=\"_string\"><span class=\"js-syntax\">'</span>ENABLED<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  overrides<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n    containerOverrides<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">{</span>\n      name<span class=\"js-syntax\">: </span>TASK_DEF_NAME<span class=\"js-syntax\">,</span>\n      environment<span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>\n        <span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>WORLD_NAME<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">: </span>world <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n        <span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>SCENE_NAME<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">: </span>name <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n        <span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>TARGET_SPP<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">: </span><span class=\"_string\">`$<span class=\"js-syntax\">{</span>targetSpp<span class=\"js-syntax\">}</span>`</span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n        <span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">: </span><span class=\"_string\"><span class=\"js-syntax\">'</span>BUCKET<span class=\"js-syntax\">'</span></span><span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">: </span>Bucket <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n      <span class=\"js-syntax\">]</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">]</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n<span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span>.promise<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"js-blueword\">const </span><span class=\"js-syntax\">{</span> taskArn <span class=\"js-syntax\">}</span><span class=\"js-keyword\"> = </span>res.tasks<span class=\"js-syntax\">[</span>0<span class=\"js-syntax\">]</span><span class=\"js-syntax\">;</span>\n<span class=\"js-blueword\">console</span>.log<span class=\"js-syntax\">(</span><span class=\"js-syntax\">{</span> name<span class=\"js-syntax\">,</span> targetSpp<span class=\"js-syntax\">,</span> taskArn <span class=\"js-syntax\">}</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Performing this sort of AWS resource manipulation in AWS Lambda is made easy\nby the automatic inclusion of the AWS SDK for Node.js."
    },
    {
      "type": "paragraph",
      "text": "What was perhaps not so easy was failing to see that the function also required\npermissions for EC2 and taking an extraordinarily long time to put two and two\ntogether when the IAM policy failed to work..."
    },
    {
      "type": "header",
      "level": 2,
      "text": "Final results in action"
    },
    {
      "type": "paragraph",
      "text": "So, once the infrastructure is deployed (all the required Terraform\nconfiguration is included in the project), the last thing to put in place is a\n'task' file that describes which scenes to render to what depth in which world."
    },
    {
      "type": "paragraph",
      "text": "Here is an example that allows the S3 bucket notification to kick off a large\nset of tasks rendering many fixed scenes in parallel:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-json\">JSON</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-syntax\">{</span>\n  <span class=\"_string\">\"bucket\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"example-bucket.chrislewis.me.uk\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"world\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"xmas-village\"</span><span class=\"js-syntax\">,</span>\n  <span class=\"_string\">\"scenes\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span>\n    <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"name\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"village-iso-farm\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"targetSpp\"</span><span class=\"js-syntax\">: </span>150\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"name\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"village-iso-stable\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"targetSpp\"</span><span class=\"js-syntax\">: </span>200\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"name\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"village-iso-smith\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"targetSpp\"</span><span class=\"js-syntax\">: </span>200\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"name\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"village-iso-faire\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"targetSpp\"</span><span class=\"js-syntax\">: </span>150\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">\"name\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"village-church\"</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">\"targetSpp\"</span><span class=\"js-syntax\">: </span>400\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">]</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "When a new version of <code>xmas-village-world.zip</code> (containing the value\nfor <code>world</code> above) is uploaded to the\n<code>/chunky-fargate/worlds</code> folder in the bucket, a Fargate task is\nlaunched for each scene to produce a render."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/chunky-fargate-tasks.png"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "Quite a long post, but a high quality personal project including skills from\nwork and previous projects, with a result that's reusable for current and future\nMinecraft worlds and community servers, as well as another proof point for\nprojects on AWS!"
    },
    {
      "type": "paragraph",
      "text": "You can check out all the source code in the\n<a class=\"link\" target=\"_blank\" href=\"https://github.com/C-D-Lewis/chunky-fargate\">GitHub repository</a> to spin this\nup for your own personal use - just provide you AWS credentials to Terraform."
    },
    {
      "type": "paragraph",
      "text": "One last pretty render..."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2021/01/chunky-fargate-stereo.png"
    }
  ]
}