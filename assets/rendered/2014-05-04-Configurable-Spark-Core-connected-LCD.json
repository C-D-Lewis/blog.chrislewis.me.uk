{
  "fileName": "2014-05-04-Configurable-Spark-Core-connected-LCD.md",
  "title": "Configurable Spark Core-connected LCD",
  "dateTime": "2014-05-04 20:52:37",
  "tags": [
    "Android",
    "C++",
    "Integration",
    "Spark Core"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "After blowing up my last LCD module <a title=\"Raspberry Pi: IP Address to LCD Display\" href=\"http://ninedof.wordpress.com/2013/07/13/raspberry-pi-ip-address-to-lcd-display/\">used for a project</a>, I decided to buy a new one, and decided on this RGB back-light module <a title=\"Sparkfun RGB LCD\" href=\"https://www.sparkfun.com/products/10862\">from Sparkfun</a>. It shares the standard pin-out as any Arduino compatible module (the 4/8-bit parallel Hitachi HD44780 interface), and includes a back-light that can be illuminated using an RGB LED."
    },
    {
      "type": "paragraph",
      "text": "I made the requisite connections for use on my Spark Core, and after discovering that the LED K connection is to ground and that the contrast adjustment pin requires a voltage of more than 4.5V (So grounding on a 3.3V system such as the Core is not enough) I had the module running nicely. As an additional feature, I connected the blue LED terminal via a BC457b transistor to allow control via software. Future expansion could include RGB PWM control for some funky effects, perhaps."
    },
    {
      "type": "paragraph",
      "text": "After playing around with setting text in the Spark IDE, I expanded the firmware to allow reception of text from a POST request, and then created such a request in Android to allow control of the back-light and text shown in app form. After a bit of layout attention, this was the result. The font size and margins are chosen to wrap the same as the LCD (Word wrapping is a novel feature of the Core firmware I wrote)."
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2014/05/screenshot_2014-05-04-21-31-28.png?w=545"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2014/05/img_20140504_213246.jpg?w=545"
    },
    {
      "type": "paragraph",
      "text": "Two useful code snippets I created for re-use in future LCD projects are sending the Spark Cloud request in Android:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-java\">Java</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-keyword\">public</span> <span class=\"js-keyword\">static</span> <span class=\"js-blueword\">String </span>cloudRequest<span class=\"js-syntax\">(</span><span class=\"js-blueword\">String </span>deviceId<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">String </span>accessToken<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">String </span>functionOrVariableName<span class=\"js-syntax\">,</span> <span class=\"js-blueword\">String </span>argString<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n  try <span class=\"js-syntax\">{</span>\n<span class=\"comment\">    //Setup connection</span>\n    URL url =<span class=\"js-keyword\"> new </span>URL<span class=\"js-syntax\">(</span><span class=\"_string\">\"https://api.spark.io/v1/devices/\"</span> + deviceId + <span class=\"_string\">\"/\"</span> + functionOrVariableName<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    HttpsURLConnection con = <span class=\"js-syntax\">(</span>HttpsURLConnection<span class=\"js-syntax\">)</span> url.openConnection<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    con.setRequestMethod<span class=\"js-syntax\">(</span><span class=\"_string\">\"POST\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-blueword\">String </span>urlParameters = <span class=\"_string\">\"access_token=\"</span> + accessToken + <span class=\"_string\">\"&args=\"</span> + argString<span class=\"js-syntax\">;</span>\n    con.setDoOutput<span class=\"js-syntax\">(</span>true<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    //Send request</span>\n    DataOutputStream wr =<span class=\"js-keyword\"> new </span>DataOutputStream<span class=\"js-syntax\">(</span>con.getOutputStream<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    wr.writeBytes<span class=\"js-syntax\">(</span>urlParameters<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    wr.flush<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    wr.close<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">    //Receive response</span>\n    con.getResponseCode<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    BufferedReader in =<span class=\"js-keyword\"> new </span>BufferedReader<span class=\"js-syntax\">(</span>new InputStreamReader<span class=\"js-syntax\">(</span>con.getInputStream<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-blueword\">String </span>inputLine<span class=\"js-syntax\">;</span>\n    StringBuffer response =<span class=\"js-keyword\"> new </span>StringBuffer<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    while <span class=\"js-syntax\">(</span><span class=\"js-syntax\">(</span>inputLine = in.readLine<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span> != null<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n      response.append<span class=\"js-syntax\">(</span>inputLine<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n    in.close<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n    <span class=\"js-keyword\">return </span>response.toString<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span> catch <span class=\"js-syntax\">(</span>Exception e<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    System.err.println<span class=\"js-syntax\">(</span>SparkUtils.class.getName<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> + <span class=\"_string\">\"<span class=\"js-syntax\">: </span>Exception:\"</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    e.printStackTrace<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    <span class=\"js-keyword\">return </span><span class=\"_string\">\"FAILED\"</span><span class=\"js-syntax\">;</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "And also performing simple word wrapping between lines 0 and 1 of the LCD display:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Check overrun</span>\n<span class=\"js-keyword\">if</span><span class=\"js-syntax\">(</span>msg.charAt<span class=\"js-syntax\">(</span>15<span class=\"js-syntax\">)</span> != <span class=\"_string\"><span class=\"_string\">' '</span></span> <span class=\"js-keyword\">&</span><span class=\"js-keyword\">&</span> msg.charAt<span class=\"js-syntax\">(</span>16<span class=\"js-syntax\">)</span> != <span class=\"_string\"><span class=\"_string\">' '</span></span><span class=\"js-syntax\">)</span>\n<span class=\"js-syntax\">{</span>\n<span class=\"comment\">    //Find start of offending word</span>\n    <span class=\"js-blueword\">int </span>index<span class=\"js-keyword\"> = </span>15<span class=\"js-syntax\">;</span>\n    while<span class=\"js-syntax\">(</span>msg.charAt<span class=\"js-syntax\">(</span>index<span class=\"js-syntax\">)</span> != <span class=\"_string\">' '</span> <span class=\"js-keyword\">&</span><span class=\"js-keyword\">&</span> index >= 0<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">{</span>\n        index--<span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n\n    String one<span class=\"js-keyword\"> = </span>msg.substring<span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">,</span> index<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    String two<span class=\"js-keyword\"> = </span>msg.substring<span class=\"js-syntax\">(</span>index + 1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n    lcd.print<span class=\"js-syntax\">(</span>one<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    lcd.setCursor<span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">,</span> 1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n    lcd.print<span class=\"js-syntax\">(</span>two<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    }
  ]
}