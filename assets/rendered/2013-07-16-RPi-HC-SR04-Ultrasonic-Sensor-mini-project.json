{
  "fileName": "2013-07-16-RPi-HC-SR04-Ultrasonic-Sensor-mini-project.md",
  "title": "RPi: HC-SR04 Ultrasonic Sensor mini-project",
  "dateTime": "2013-07-16 22:50:08",
  "tags": [
    "Raspberry Pi",
    "C++"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "<strong>In an almost biblical revelation, I have found it IS indeed possible to post source code in a proper fashion on Wordpress, making a virtual mockery of my Pebble SDK Tutorial pages, which I might update, but not for now. The code segments are available in source links in each post."
    },
    {
      "type": "paragraph",
      "text": "So, what better reason to make a new post using this newly discovered feature than to write about my latest Raspberry Pi escapade. I have a cheap <a title=\"HCSR04\" href=\"http://letsmakerobots.com/node/30209\">HC-SR04 ultrasonic sensor</a> that I used with an Ultrasonic library with my Arduino. Having since obtained a Pi, why not have it work with this new piece of kit?"
    },
    {
      "type": "paragraph",
      "text": "After observing the <a title=\"Timing Requirements (Page 2)\" href=\"http://jaktek.com/wp-content/uploads/2011/12/HC-SR04.pdf\">timing requirements</a>, it seemed simple enough to replicate that behavior with a short C program, shown below in all it's copyable glory!"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-cpp\">C++</div>\n<pre><div class=\"code-block\">\n#<span class=\"js-keyword\">include </span><stdio.h>\n#<span class=\"js-keyword\">include </span><stdlib.h>\n#<span class=\"js-keyword\">include </span><wiringPi.h>\n\n#<span class=\"js-keyword\">define</span> TRUE 1\n\n#<span class=\"js-keyword\">define</span> TRIG 5\n#<span class=\"js-keyword\">define</span> ECHO 6\n\n<span class=\"js-blueword\">void </span>setup<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        wiringPiSetup<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        pinMode<span class=\"js-syntax\">(</span>TRIG<span class=\"js-syntax\">,</span> OUTPUT<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        pinMode<span class=\"js-syntax\">(</span>ECHO<span class=\"js-syntax\">,</span> INPUT<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">        //TRIG pin must start LOW</span>\n        digitalWrite<span class=\"js-syntax\">(</span>TRIG<span class=\"js-syntax\">,</span> LOW<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        delay<span class=\"js-syntax\">(</span>30<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">int </span>getCM<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n<span class=\"comment\">        //Send trig pulse</span>\n        digitalWrite<span class=\"js-syntax\">(</span>TRIG<span class=\"js-syntax\">,</span> HIGH<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        delayMicroseconds<span class=\"js-syntax\">(</span>20<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        digitalWrite<span class=\"js-syntax\">(</span>TRIG<span class=\"js-syntax\">,</span> LOW<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">        //Wait for echo start</span>\n        while<span class=\"js-syntax\">(</span>digitalRead<span class=\"js-syntax\">(</span>ECHO<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">== </span>LOW<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">        //Wait for echo end</span>\n        long startTime<span class=\"js-keyword\"> = </span>micros<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        while<span class=\"js-syntax\">(</span>digitalRead<span class=\"js-syntax\">(</span>ECHO<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">== </span>HIGH<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        long travelTime<span class=\"js-keyword\"> = </span>micros<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span> - startTime<span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">        //Get distance in cm</span>\n        <span class=\"js-blueword\">int </span>distance<span class=\"js-keyword\"> = </span>travelTime / 58<span class=\"js-syntax\">;</span>\n\n        <span class=\"js-keyword\">return </span>distance<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n\n<span class=\"js-blueword\">int </span>main<span class=\"js-syntax\">(</span>void<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n        setup<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n        printf<span class=\"js-syntax\">(</span><span class=\"_string\">\"Distance<span class=\"js-syntax\">:</span> %dcm\\n\"</span><span class=\"js-syntax\">,</span> getCM<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n        <span class=\"js-keyword\">return </span>0<span class=\"js-syntax\">;</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "Which results in this output:"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2013/07/ultrasonic.png?w=545"
    },
    {
      "type": "paragraph",
      "text": "So now I know the distance to the ceiling!"
    }
  ]
}