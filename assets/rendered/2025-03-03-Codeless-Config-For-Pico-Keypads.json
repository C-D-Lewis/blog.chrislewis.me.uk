{
  "fileName": "2025-03-03-Codeless-Config-For-Pico-Keypads.md",
  "title": "Codeless Config For Pico Keypads",
  "dateTime": "2025-03-03 14:01",
  "tags": [
    "Raspberry Pi"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "After completing a\n<a class=\"link\" target=\"_blank\" href=\"https://blog.chrislewis.me.uk/?post=2023-03-26-Customising-a-Pi-Pico-Keypad\">project</a>\ninvolving assembling a Raspberry Pi Pico W with a Pimoroni Keybow keypad kit and\ncreating a script to allow specifying macros and key combos for Windows\nfunctions and applications, I spent quite some time happily using it. I quickly\nfound I preferred using the media keys, muting/unmuting audio and Discord, and\nsleeping my PC using it to the equivalent keyboard and GUI shortcuts."
    },
    {
      "type": "image",
      "description": "",
      "src": "assets/media/2025/03/keypad.jpg"
    },
    {
      "type": "paragraph",
      "text": "After getting interest from a couple of people I decided to make copies for\nthem to use with their own PCs. However, although it was 'easy' for me to\nspecify which key did which command, it did require knowledge of Python\ndictionaries and intuition to debug the Pico when it crashed - it has no console\nlog and no other visual clues to help!"
    },
    {
      "type": "paragraph",
      "text": "The customization aspect involved changing a global dictionary that looked like\nthis:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-python\">Python</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\"># Map of keys on each layer</span>\nKEY_MAP<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">{</span>\n<span class=\"comment\">  # Media/utilty</span>\n  0<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n    1<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'control_code'</span><span class=\"js-syntax\">:</span> ConsumerControlCode<span class=\"js-syntax\">.</span>SCAN_PREVIOUS_TRACK<span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'color'</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 64<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    2<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'control_code'</span><span class=\"js-syntax\">:</span> ConsumerControlCode<span class=\"js-syntax\">.</span>PLAY_PAUSE<span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'color'</span><span class=\"js-syntax\">:</span> COLOR_GREEN\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n<span class=\"comment\">  # Applications</span>\n  1<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n    1<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'custom'</span><span class=\"js-syntax\">:</span> lambda<span class=\"js-syntax\">:</span> run_program<span class=\"js-syntax\">(</span><span class=\"_string\">'spotify'</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'color'</span><span class=\"js-syntax\">:</span> COLOR_GREEN\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span>\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n<span class=\"comment\">  # System</span>\n  2<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n    1<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'combo'</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">(</span>Keycode<span class=\"js-syntax\">.</span>CONTROL<span class=\"js-syntax\">,</span> Keycode<span class=\"js-syntax\">.</span>SHIFT<span class=\"js-syntax\">,</span> Keycode<span class=\"js-syntax\">.</span>ESCAPE<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'color'</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">,</span> 32<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span><span class=\"js-syntax\">.</span>\n    15<span class=\"js-syntax\">:</span> <span class=\"js-syntax\">{</span>\n      <span class=\"_string\">'sequence'</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">[</span><span class=\"js-syntax\">(</span>Keycode<span class=\"js-syntax\">.</span>GUI<span class=\"js-syntax\">,</span> Keycode<span class=\"js-syntax\">.</span>X<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span> Keycode<span class=\"js-syntax\">.</span>U<span class=\"js-syntax\">,</span> Keycode<span class=\"js-syntax\">.</span>U<span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'color'</span><span class=\"js-syntax\">:</span> <span class=\"js-syntax\">(</span>32<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">,</span> 0<span class=\"js-syntax\">)</span><span class=\"js-syntax\">,</span>\n      <span class=\"_string\">'custom'</span><span class=\"js-syntax\">:</span> lambda<span class=\"js-syntax\">:</span> go_to_sleep<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n    <span class=\"js-syntax\">}</span>\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "So, you have to know how to edit the dictionary and add members of the imported\nclasses for key codes, not mess up placing commas or brackets etc..."
    },
    {
      "type": "header",
      "level": 2,
      "text": "A Better Way"
    },
    {
      "type": "paragraph",
      "text": "I asked if JSON would be easier and after a brief example it seemed that it\nwould a lot easier for others to customize their keypads for their own shortcuts\nand applications if all that had to be done was edit a JSON file containing\nthe macro definitions. As a bonus, it would also mean when I give them new code\nfiles they won't have to splice in their changes to the above dictionary and\nrisk messing it up."
    },
    {
      "type": "paragraph",
      "text": "After <i>much</i> trial and error with JSON/YAML loading modules that either\ncouldn't be used with the particular flavour of Micropython/CircuitPython I\ndiscovered there was some built-in functionality I could\nuse - <code>json</code>! The more you know!"
    },
    {
      "type": "paragraph",
      "text": "To put a long story short (reworking most of the code to work with the JSON\nspecific data types and new structures) loading of the file looks like this:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-python\">Python</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">#</span>\n<span class=\"comment\"># Load macros from JSON file</span>\n<span class=\"comment\">#</span>\n<span class=\"python-blue\">def </span><span class=\"python-green\">load</span><span class=\"js-syntax\"><span class=\"js-syntax\">(</span></span><span class=\"python-orange\">keys</span><span class=\"js-syntax\"><span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span></span>\n  <span class=\"js-keyword\">global </span>macro_map\n  <span class=\"js-keyword\">global </span>num_layers\n  \n <span class=\"js-keyword\"> try<span class=\"js-syntax\">:</span></span>\n   <span class=\"js-keyword\"> with </span>open<span class=\"js-syntax\">(</span>constants<span class=\"js-syntax\">.</span>MACROS_JSON_PATH<span class=\"js-syntax\">,</span> <span class=\"_string\">'r'</span><span class=\"js-syntax\">)</span><span class=\"js-keyword\"> as </span>json_file<span class=\"js-syntax\">:</span>\n      json_arr<span class=\"js-keyword\"> = </span>json<span class=\"js-syntax\">.</span>load<span class=\"js-syntax\">(</span>json_file<span class=\"js-syntax\">)</span>\n      \n      num_layers<span class=\"js-keyword\"> = </span>len<span class=\"js-syntax\">(</span>json_arr<span class=\"js-syntax\">)</span>\n      macro_map<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">[</span>int_keys<span class=\"js-syntax\">(</span>item<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">for </span>item<span class=\"js-keyword\"> in </span>json_arr<span class=\"js-syntax\">]</span>\n\n      keys<span class=\"js-syntax\">[</span>8<span class=\"js-syntax\">]</span><span class=\"js-syntax\">.</span>set_led<span class=\"js-syntax\">(</span><span class=\"js-keyword\">*</span>constants<span class=\"js-syntax\">.</span>COLOR_GREEN<span class=\"js-syntax\">)</span>\n <span class=\"js-keyword\"> except </span>Exception<span class=\"js-syntax\">:</span>\n    keys<span class=\"js-syntax\">[</span>8<span class=\"js-syntax\">]</span><span class=\"js-syntax\">.</span>set_led<span class=\"js-syntax\">(</span><span class=\"js-keyword\">*</span>constants<span class=\"js-syntax\">.</span>COLOR_RED<span class=\"js-syntax\">)</span>\n    raise Exception<span class=\"js-syntax\">(</span><span class=\"_string\">'Failed to load macros'</span><span class=\"js-syntax\">)</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "At least if the user gets JSON syntax wrong (and many validators are available)\nthey will see LED 8 go red and tell them where to look in a general sense. The\nvalid example file looks a little something like this:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-json\">JSON</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"js-syntax\">[</span>\n  <span class=\"js-syntax\">{</span>\n    <span class=\"_string\">\"1\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"control_code\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"SCAN_PREVIOUS_TRACK\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_BLUE\"</span>   <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"2\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"control_code\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"PLAY_PAUSE\"</span><span class=\"js-syntax\">,</span>          <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_GREEN\"</span>  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"3\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"control_code\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"SCAN_NEXT_TRACK\"</span><span class=\"js-syntax\">,</span>     <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_BLUE\"</span>   <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n   <span class=\"js-syntax\"> .</span>..\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">{</span>\n    <span class=\"_string\">\"1\"</span><span class=\"js-syntax\">: </span> <span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"text\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"7\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_GREY\"</span>       <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"2\"</span><span class=\"js-syntax\">: </span> <span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"text\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"8\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_GREY\"</span>       <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"3\"</span><span class=\"js-syntax\">: </span> <span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"text\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"9\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_GREY\"</span>       <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n   <span class=\"js-syntax\"> .</span>..\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">{</span>\n    <span class=\"_string\">\"1\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"search\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"spotify\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_GREEN\"</span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"2\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"search\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"steam\"</span><span class=\"js-syntax\">,</span>   <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"0<span class=\"js-syntax\">,</span>0<span class=\"js-syntax\">,</span>16\"</span>      <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"3\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"search\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"discord\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"0<span class=\"js-syntax\">,</span>32<span class=\"js-syntax\">,</span>64\"</span>     <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n   <span class=\"js-syntax\"> .</span>..\n  <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n  <span class=\"js-syntax\">{</span>\n    <span class=\"_string\">\"1\"</span><span class=\"js-syntax\">: </span> <span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"combo\"</span><span class=\"js-syntax\">,</span>    <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span><span class=\"_string\">\"CONTROL\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"SHIFT\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"ESCAPE\"</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"0<span class=\"js-syntax\">,</span>32<span class=\"js-syntax\">,</span>0\"</span>       <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"2\"</span><span class=\"js-syntax\">: </span> <span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"combo\"</span><span class=\"js-syntax\">,</span>    <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span><span class=\"_string\">\"GUI\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"E\"</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>                   <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"COLOR_YELLOW\"</span> <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n    <span class=\"_string\">\"13\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span> <span class=\"_string\">\"type\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"sequence\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"value\"</span><span class=\"js-syntax\">: </span><span class=\"js-syntax\">[</span><span class=\"js-syntax\">[</span><span class=\"_string\">\"GUI\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"X\"</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"U\"</span><span class=\"js-syntax\">,</span> <span class=\"_string\">\"S\"</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">,</span>       <span class=\"_string\">\"color\"</span><span class=\"js-syntax\">: </span><span class=\"_string\">\"0<span class=\"js-syntax\">,</span>0<span class=\"js-syntax\">,</span>32\"</span>       <span class=\"js-syntax\">}</span><span class=\"js-syntax\">,</span>\n   <span class=\"js-syntax\"> .</span>..\n  <span class=\"js-syntax\">}</span>\n<span class=\"js-syntax\">]</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "As can be seen, the names of properties of classes such as\n<code>ConsumerControlCode</code> must be an exact match, and there are some\nbuilt-in color constants that can be used that start with <code>COLOR_</code>. I\nthink it's not only more readable but quicker and safer to modify, even for\nmyself!"
    },
    {
      "type": "paragraph",
      "text": "Eagle-eyed readers will also notice the JSON file is an array of pages of\nmacros - this means not only can there be any number of pages (facilitated by\na new feature of a 'page up' and 'page down' on the left hand column of buttons)\nbut they can also be re-arranged super easily! I also added layer that functions\nas a numpad."
    },
    {
      "type": "paragraph",
      "text": "The JSON module allows the entire data structure to be loaded as a dictionary\nand so accessed with the predictable if verbose syntax and interpreted based\non the type. I was very glad to learn of <code>getattr</code> to lookup a string\nproperty of an imported class and saved many lookup tables."
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-python\">Python</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">#</span>\n<span class=\"comment\"># Parse and handle a macro config when pressed, based on <span class=\"_string\">'type'</span></span>\n<span class=\"comment\">#</span>\n<span class=\"python-blue\">def </span><span class=\"python-green\">handle</span><span class=\"js-syntax\"><span class=\"js-syntax\">(</span></span><span class=\"python-orange\">config</span><span class=\"js-syntax\"><span class=\"js-syntax\">,</span></span><span class=\"python-orange\"> keys</span><span class=\"js-syntax\"><span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span></span>\n<span class=\"comment\">  # Validate</span>\n  <span class=\"js-keyword\">if </span><span class=\"js-keyword\">not </span>all<span class=\"js-syntax\">(</span>key<span class=\"js-keyword\"> in </span>config <span class=\"js-keyword\">for </span>key<span class=\"js-keyword\"> in </span><span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">,</span> <span class=\"_string\">'value'</span><span class=\"js-syntax\">,</span> <span class=\"_string\">'color'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span>\n    raise Exception<span class=\"js-syntax\">(</span><span class=\"_string\">'Missing config values'</span><span class=\"js-syntax\">)</span>\n\n<span class=\"comment\">  # Send control code for media actions</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'control_code'</span><span class=\"js-syntax\">:</span>\n    consumer_control<span class=\"js-syntax\">.</span>send<span class=\"js-syntax\">(</span>getattr<span class=\"js-syntax\">(</span>ConsumerControlCode<span class=\"js-syntax\">,</span> config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    return\n\n<span class=\"comment\">  # Write some text as a keyboard</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'text'</span><span class=\"js-syntax\">:</span>\n    layout<span class=\"js-syntax\">.</span>write<span class=\"js-syntax\">(</span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span>\n    return\n\n<span class=\"comment\">  # Key combo</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'combo'</span><span class=\"js-syntax\">:</span>\n    values<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">[</span>getattr<span class=\"js-syntax\">(</span>Keycode<span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">for </span>value<span class=\"js-keyword\"> in </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">]</span>\n    keyboard<span class=\"js-syntax\">.</span>press<span class=\"js-syntax\">(</span><span class=\"js-keyword\">*</span>tuple<span class=\"js-syntax\">(</span>values<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    keyboard<span class=\"js-syntax\">.</span>release_all<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n    return\n\n<span class=\"comment\">  # Sequence of keys or key combos</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'sequence'</span><span class=\"js-syntax\">:</span>\n    <span class=\"js-keyword\">for </span>item<span class=\"js-keyword\"> in </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">:</span>\n      <span class=\"js-keyword\">if </span>isinstance<span class=\"js-syntax\">(</span>item<span class=\"js-syntax\">,</span> list<span class=\"js-syntax\">)</span><span class=\"js-syntax\">:</span>\n        values<span class=\"js-keyword\"> = </span><span class=\"js-syntax\">[</span>getattr<span class=\"js-syntax\">(</span>Keycode<span class=\"js-syntax\">,</span> value<span class=\"js-syntax\">)</span> <span class=\"js-keyword\">for </span>value<span class=\"js-keyword\"> in </span>item<span class=\"js-syntax\">]</span>\n        keyboard<span class=\"js-syntax\">.</span>press<span class=\"js-syntax\">(</span><span class=\"js-keyword\">*</span>tuple<span class=\"js-syntax\">(</span>values<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n     <span class=\"js-keyword\"> else</span><span class=\"js-syntax\">:</span>\n        keyboard<span class=\"js-syntax\">.</span>press<span class=\"js-syntax\">(</span>getattr<span class=\"js-syntax\">(</span>Keycode<span class=\"js-syntax\">,</span> item<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n      time<span class=\"js-syntax\">.</span>sleep<span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">.</span>2<span class=\"js-syntax\">)</span>\n      keyboard<span class=\"js-syntax\">.</span>release_all<span class=\"js-syntax\">(</span><span class=\"js-syntax\">)</span>\n      time<span class=\"js-syntax\">.</span>sleep<span class=\"js-syntax\">(</span>0<span class=\"js-syntax\">.</span>5<span class=\"js-syntax\">)</span>\n    return\n\n<span class=\"comment\">  # Run a custom function - must be runnable from this scope</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'custom'</span><span class=\"js-syntax\">:</span>\n    eval<span class=\"js-syntax\">(</span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span>\n    return\n\n<span class=\"comment\">  # Search in Start menu and then press enter to launch</span>\n  <span class=\"js-keyword\">if </span>config<span class=\"js-syntax\">[</span><span class=\"_string\">'type'</span><span class=\"js-syntax\">]</span><span class=\"js-keyword\"> == </span><span class=\"_string\">'search'</span><span class=\"js-syntax\">:</span>\n    utils<span class=\"js-syntax\">.</span>start_menu_search<span class=\"js-syntax\">(</span>keyboard<span class=\"js-syntax\">,</span> layout<span class=\"js-syntax\">,</span> config<span class=\"js-syntax\">[</span><span class=\"_string\">'value'</span><span class=\"js-syntax\">]</span><span class=\"js-syntax\">)</span>\n    return\n</div></pre>"
    },
    {
      "type": "header",
      "level": 2,
      "text": "Conclusion"
    },
    {
      "type": "paragraph",
      "text": "As before, this project is one of a few that keep on giving and I keep on\nusing - in multiple locations. I don't have any new features or improvements in\nmind right now, but in the future if more come along I'm sure another post\nwill be warranted."
    },
    {
      "type": "paragraph",
      "text": "In the meantime, I should return to my projects for the second\n<a class=\"link\" target=\"_blank\" href=\"https://rebble.io/hackathon-002/\">Rebble hackathon</a>..."
    }
  ]
}