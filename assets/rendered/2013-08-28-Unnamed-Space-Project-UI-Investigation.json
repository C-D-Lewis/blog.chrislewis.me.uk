{
  "fileName": "2013-08-28-Unnamed-Space-Project-UI-Investigation.md",
  "title": "Unnamed Space Project: UI Investigation",
  "dateTime": "2013-08-28 00:40:47",
  "tags": [
    "Java",
    "Games"
  ],
  "components": [
    {
      "type": "paragraph",
      "text": "So I've had an idea in my head for a while that has probably been done before, but as I've already mentioned, I prefer to do everything I can from scratch when it comes to programming, which takes time, but is incredibly rewarding when what I strive for comes to life as I imagined."
    },
    {
      "type": "paragraph",
      "text": "This particular idea is for a real-time space RPG, the main mechanic being that you set a course and a speed, and it might take a few real-time minutes to reach your destination, such that you would play the game ongoing in the background for something else you are doing, similar to an MMO."
    },
    {
      "type": "paragraph",
      "text": "I've attempted this before, and the main difference in having a game world many times larger than the screen is that you must position everything relative to some abstracted co-ordinate system completely separate from where each item may be drawn on the actual screen. This was achieved before by drawing each item if it was less than a screen width or height away from the player's drawing location in the middle of the screen, then whenever the player moved it's 'co-ordinate', all the other in-game items moved in the opposite direction, very effectively creating the illusion of moving through a world, even though the player's sprite stays put on the screen."
    },
    {
      "type": "paragraph",
      "text": "This feeling was further enhanced by moving the player's 'co-ordinate' using the sin/cosine of the speed and angle, allowing the player to appear to move in large smooth, sweeping arcs."
    },
    {
      "type": "paragraph",
      "text": "With my new skills from recent projects still fresh in mind, I set out to make this a much tighter experience, with some more intuitive input system beyond WSAD keyboard keys. I envisaged a speed slider, and a 'ring slider' around the player in the center of the screen, allowing a course to be set and speed to be set by dragging them. As everything is done on a Graphics2D enhanced Canvas component, using pre-written Swing sliders is out of the question, so I set out to recreate these UI elements from scratch to be drawn using Graphics2D methods."
    },
    {
      "type": "paragraph",
      "text": "The linear slider was fairly easy, using the <code>mouseDragged()</code> method from the <code>MouseMotionListener</code> class. Position the slider where the user clicked (x co-ordinate only!) as long as it was between the slider's start and finish positions."
    },
    {
      "type": "paragraph",
      "text": "So far so good."
    },
    {
      "type": "paragraph",
      "text": "But the 'ring slider' required much more thinking about. I first attempted to use counters and quadrant detection of the existing angle position of the ring, but this was way too complex. Then as I was thinking about something else, the answer came to me: use GCSE maths! Specifically, the circle trigonometry stuff. It all came down to this: !<a class=\"link\" target=\"_blank\" href=\"/assets/import/media/2013/08/circletheorem.png\"></a>So using the mouse's dragging x co-ordinate, I can find the corresponding y co-ordinate for that point around the 'ring slider''scircle. From this, the angle (theta, <b>Î¸</b>) the slider should be set to can be found using the tangent:"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2013/08/arctan.png"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2013/08/quadrantssrc1.png"
    },
    {
      "type": "paragraph",
      "text": "Here is the code for calculation of the angle of the 'ring slider' in quadrant 0:"
    },
    {
      "type": "paragraph",
      "text": "<div class=\"lang-label lang-java\">Java</div>\n<pre class=\"\"><div class=\"code-block\">\n<span class=\"comment\">//Setup quad rects for ring slider of any bounds x, y, width & height</span>\nquad0 = new Rectangle<span class=\"js-syntax\">(</span>x + width/2<span class=\"js-syntax\">,</span> y<span class=\"js-syntax\">,</span> width/2<span class=\"js-syntax\">,</span> height/2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\nquad1 = new Rectangle<span class=\"js-syntax\">(</span>x + width/2<span class=\"js-syntax\">,</span> y + height/2<span class=\"js-syntax\">,</span> width/2<span class=\"js-syntax\">,</span> height/2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\nquad2 = new Rectangle<span class=\"js-syntax\">(</span>x<span class=\"js-syntax\">,</span> y + height/2<span class=\"js-syntax\">,</span> width/2<span class=\"js-syntax\">,</span> height/2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\nquad3 = new Rectangle<span class=\"js-syntax\">(</span>x<span class=\"js-syntax\">,</span> y<span class=\"js-syntax\">,</span> width/2<span class=\"js-syntax\">,</span> height/2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">//Test user click - 2x2 rect around mouse pointer location</span>\nRectangle thisRect = new Rectangle<span class=\"js-syntax\">(</span>inCurrent.x - 1<span class=\"js-syntax\">,</span> inCurrent.y - 1<span class=\"js-syntax\">,</span> 2<span class=\"js-syntax\">,</span> 2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">//Show angle</span>\nif<span class=\"js-syntax\">(</span>thisRect.intersects<span class=\"js-syntax\">(</span>quad0<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    thisQuad = 0<span class=\"js-syntax\">;</span>\nelse if<span class=\"js-syntax\">(</span>thisRect.intersects<span class=\"js-syntax\">(</span>quad1<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    thisQuad= 1<span class=\"js-syntax\">;</span>\nelse if<span class=\"js-syntax\">(</span>thisRect.intersects<span class=\"js-syntax\">(</span>quad2<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    thisQuad = 2<span class=\"js-syntax\">;</span>\nelse if<span class=\"js-syntax\">(</span>thisRect.intersects<span class=\"js-syntax\">(</span>quad3<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span>\n    thisQuad = 3<span class=\"js-syntax\">;</span>\n\nswitch<span class=\"js-syntax\">(</span>thisQuad<span class=\"js-syntax\">)</span> <span class=\"js-syntax\">{</span>\n    case 0<span class=\"js-syntax\">: </span><span class=\"js-syntax\">{</span>\n        float adj = inCurrent.x - quad0.x<span class=\"js-syntax\">;</span>\n        float opp = <span class=\"js-syntax\">(</span>quad0.y + quad0.height<span class=\"js-syntax\">)</span> - inCurrent.y<span class=\"js-syntax\">;</span>\n\n        double theta = Math.toDegrees<span class=\"js-syntax\">(</span>Math.atan<span class=\"js-syntax\">(</span>opp/adj<span class=\"js-syntax\">)</span><span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n        angle = 90 - <span class=\"js-syntax\">(</span>int<span class=\"js-syntax\">)</span>Math.round<span class=\"js-syntax\">(</span>theta<span class=\"js-syntax\">)</span><span class=\"js-syntax\">;</span>\n\n<span class=\"comment\">        //Range control</span>\n        if<span class=\"js-syntax\">(</span>angle < 0<span class=\"js-syntax\">)</span>\n            angle = 0<span class=\"js-syntax\">;</span>\n        if<span class=\"js-syntax\">(</span>angle > 90<span class=\"js-syntax\">)</span>\n            angle = 90<span class=\"js-syntax\">;</span>\n        break<span class=\"js-syntax\">;</span>\n    <span class=\"js-syntax\">}</span>\n<span class=\"comment\">    //Then the other quads for cases 1 through 3...</span>\n<span class=\"js-syntax\">}</span>\n</div></pre>"
    },
    {
      "type": "paragraph",
      "text": "The end result of all this, together with a spawning starfield of stars (who move proportionately to their size to create the illusion of depth) is this (Click to enlarge):"
    },
    {
      "type": "image",
      "description": "",
      "src": "/assets/import/media/2013/08/inaction.png?w=545"
    }
  ]
}